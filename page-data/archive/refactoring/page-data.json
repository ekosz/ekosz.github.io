{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/refactoring/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"f8bb6beb-36c2-5fc4-8938-93ba28437200","excerpt":"Programs rot. Without tender love and care, they become unmaintainable. They\nonly way to fight this process is through continuous refactoring. A feature is not…","html":"<p>Programs rot. Without tender love and care, they become unmaintainable. They\nonly way to fight this process is through continuous refactoring.</p>\n<p>A feature is not done when its working. Its done after its working and\nrefactored. There is no set and forget in the software world. If we move on\nfrom a piece of code, before we refactor, we add to the projects technical\ndept. Do this too often, and the team will be forced to try and write a check\nthat it can’t cash.</p>\n<p>If you are afraid to refactor, as it might break existing code, write more\ntests. Tests prove that software works. With near 100% test coverage one can\nbe sure that if the test pass, nothing is broken. Keep writing tests until\nyour fears are gone. With no fear, a team can refactor to their hearts’\ncontent.</p>","frontmatter":{"title":"Refactoring","date":"July 25, 2012","description":null}},"previous":{"fields":{"slug":"/archive/code-katas/"},"frontmatter":{"title":"Code katas"}},"next":{"fields":{"slug":"/archive/do-not-count-on-persistent-state/"},"frontmatter":{"title":"Do not count on persistent state"}}},"pageContext":{"id":"f8bb6beb-36c2-5fc4-8938-93ba28437200","previousPostId":"488c81b3-f7be-5eda-989b-feb8a1593b9a","nextPostId":"ab8871fe-4f7b-5f6d-a09a-f446d3fc3884"}},
    "staticQueryHashes": ["2841359383","3257411868"]}