{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/do-not-count-on-persistent-state/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"ab8871fe-4f7b-5f6d-a09a-f446d3fc3884","excerpt":"Today I finished moving my Tic Tac Toe program to the web. Before the game ran\non a loop, and a single game object was constantly fed new moves. You can’t do…","html":"<p>Today I finished moving my Tic Tac Toe program to the web. Before the game ran\non a loop, and a single game object was constantly fed new moves. You can’t do\nthis with web based UI. Every web request starts with a blank slate. There is\nno persistence between requests.</p>\n<p>Don’t fall into the trap of expecting your objects to always be there.\nNetflix forces their developers to not relay on any object or service. They\ncreated the program\n<a href=\"http://techblog.netflix.com/2010/12/5-lessons-weve-learned-using-aws.html\">Chaos Monkey</a>.\nChaos Monkey randomly kills instances and services running on Netflix’s\nservers. This way, code must be written in a way that does not assume\npersistence.</p>\n<p>Code written this way ends up being more robust, and can interface with more\nmores of communication.</p>","frontmatter":{"title":"Do not count on persistent state","date":"July 26, 2012","description":null}},"previous":{"fields":{"slug":"/archive/refactoring/"},"frontmatter":{"title":"Refactoring"}},"next":{"fields":{"slug":"/archive/simple-tcp-server-in-elixir/"},"frontmatter":{"title":"Simple TCP server in Elixir"}}},"pageContext":{"id":"ab8871fe-4f7b-5f6d-a09a-f446d3fc3884","previousPostId":"f8bb6beb-36c2-5fc4-8938-93ba28437200","nextPostId":"f34a1e74-5480-51e7-bf5e-49981c27e8a2"}},
    "staticQueryHashes": ["2841359383","3257411868"]}