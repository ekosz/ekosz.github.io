{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/pain-based-programming/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"1957017c-a5ef-5d7d-a3a1-dfa2ef07578d","excerpt":"According to Forbs, the number one cause of death is premature scaling.\nI would like to venture that, like startups, the number one cause for\nfailure in…","html":"<p>According to <a href=\"http://www.forbes.com/sites/nathanfurr/2011/09/02/1-cause-of-startup-death-premature-scaling/\">Forbs</a>, the number one cause of death is premature scaling.\nI would like to venture that, like startups, the number one cause for\nfailure in software projects is premature flexibility.</p>\n<p>As programmers we are constantly sacrificing simplicity for flexibility. But\nwhen do we make these decisions? Good refactoring techniques teach us to keep\ncode repeat low, and separate concerns whenever possible. We introduce\ninterfaces and split large classes into smaller ones.</p>\n<p>While we have good intentions many of us find our projects getting out of hand\neven when following all of the “proper” techniques. The problem comes from the\nfact that we are introducing this extra complexity without first feeling the\npain from the code we are trying to “fix”.</p>\n<p>Don’t add flexibility to code without first feeling the pain of their\nrigidity. When pain based programming, each of your refactorings should reduce a\npain you’re feeling from your code. If you come out of a refactoring step and\nthe pain is still there, the refactoring was wrong. Don’t refactor if there is\nno pain yet, even if you have a feeling that there will a problem later. You\nmay be right, but often you’re not.</p>","frontmatter":{"title":"Pain based programming","date":"August 24, 2012","description":null}},"previous":{"fields":{"slug":"/archive/oauth-in-clojure/"},"frontmatter":{"title":"Google oauth in Clojure"}},"next":{"fields":{"slug":"/archive/intro-to-hyperion/"},"frontmatter":{"title":"Introduction to Hyperion"}}},"pageContext":{"id":"1957017c-a5ef-5d7d-a3a1-dfa2ef07578d","previousPostId":"e8b235c1-6163-5d7d-97db-90d2da75ce34","nextPostId":"e800b199-c457-50b1-b7d5-e6fd82391631"}},
    "staticQueryHashes": ["2841359383","3257411868"]}