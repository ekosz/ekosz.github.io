{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/otp-gen-server/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"4a967dfe-56ea-572b-8f7e-debdb0a90cf1","excerpt":"This will be the first of many posts coming up on Erlang’s OTP library. If\nyou have never heard of OTP, let me explain. When Erlang was first introduced\nin the…","html":"<p>This will be the first of many posts coming up on Erlang’s OTP library. If\nyou have never heard of OTP, let me explain. When Erlang was first introduced\nin the 80s certain patterns emerged over and over again. These patterns were\nthen extracted into a common library named, “The Open Telecom Protocol”, or OTP.\nAfter 30 years OTP now has little to do with the Telecom, but the named has\nstuck.</p>\n<p>OTP provides powerful abstractions to complex patterns and can make\ndevelopment much easier as a Erlang or Elixir developer. This post will cover\none of the most commonly module of OTP, gen_server.</p>\n<p>As you may know, there is no global state in Erlang. While this alleviates much\nof the headaches one might get with OO languages, this does create a challenge\nwhen state must be shared across systems. Lets use the real life example of\nElixir’s ExUnit testing framework. If you need a refresher on how ExUnit works\nread up on it <a href=\"http://ekosz.github.com/2012/07/30/testing-elixir.html\">here</a>.</p>\n<p>ExUnit runs in to phases, setup and test execution. During the setup phase,\nExUnit needs to keep track of every module that uses ExUnit and whether or not\nthe tests in that module should be run synchronously or asynchronously. These\nmodules will then be used throughout ExUnit. Without global state we would need to\npass these modules around throughout the program adding an extra parameter to\nmany methods. One could see how this could get out of hand very quickly. This\nis where gen_server comes in.</p>\n<p>gen_server lets Erlang and Elixir programs fake global state. Lets write\na simple program to work off of.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">defmodule Incrementor <span class=\"token keyword\">do</span>\n\n  use GenServer<span class=\"token punctuation\">.</span>Behavior\n\n  defrecord State<span class=\"token punctuation\">,</span> <span class=\"token symbol\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n\n  <span class=\"token comment\"># Callbacks</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">init</span></span><span class=\"token punctuation\">(</span>_args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span><span class=\"token symbol\">:ok</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_call</span></span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:add</span><span class=\"token punctuation\">,</span> _from<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    new_state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>increment_counter\n    <span class=\"token punctuation\">{</span><span class=\"token symbol\">:reply</span><span class=\"token punctuation\">,</span> new_state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">,</span> new_state<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_call</span></span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># In iex</span>\n\n<span class=\"token symbol\">:gen_server</span><span class=\"token punctuation\">.</span>start_link<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token symbol\">:local</span><span class=\"token punctuation\">,</span> Incrementor <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Incrementor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token symbol\">:gen_server</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>Incrementor<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:add</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> 1</span>\n<span class=\"token symbol\">:gen_server</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>Incrementor<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:add</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> 2</span>\n<span class=\"token symbol\">:gen_server</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>Incrementor<span class=\"token punctuation\">,</span> <span class=\"token symbol\">:add</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> 3</span></code></pre></div>\n<p>OK, what did we do there? First thing was create a module and use the\nGenServer behavior. That notifies the Erlang VM that this module will respond to\ncertain methods that the gen_sever module expects much like an interface in\nOO languages. Next we define a record that our server will use internally for\nrecord keeping. Finally we get to the meat of the server, the callbacks.</p>\n<p>These are the methods that gen_server will use to customize its behavior. The\ninit method takes some arguments (that we don’t use here), and expects\na response of <code class=\"language-text\">{:ok, some_initial_state}</code>. This will set the initial state of\nthe server. Next we have handle_call. Handle call takes a method thats being\ncalled, who is calling the method, and the current state of the server. It\nexpects something will happen inside the method, then a response of\n<code class=\"language-text\">{:reply, the_result, the_new_state_of_the_server}</code>. Our server patterns\nmatches of the :add method, and supers all other method calls.</p>\n<p>Using this pattern, the server will always have a state and that state can then\nbe queried by outside modules.</p>\n<p>In my next posts, I’ll go over some of the other call backs our server can\nimplement for more dynamic behavior.</p>","frontmatter":{"title":"OTP: Gen Server","date":"August 03, 2012","description":null}},"previous":{"fields":{"slug":"/archive/endless-pagination-in-jekyll/"},"frontmatter":{"title":"Endless pagination in Jekyll"}},"next":{"fields":{"slug":"/archive/otp-gen-server-part-ii/"},"frontmatter":{"title":"OTP: Gen Server part II"}}},"pageContext":{"id":"4a967dfe-56ea-572b-8f7e-debdb0a90cf1","previousPostId":"bd2ad3ea-8ed4-5473-ba68-623ea1e163be","nextPostId":"301b1c1e-cb36-579a-9a04-9fde9b57e418"}},
    "staticQueryHashes": ["2841359383","3257411868"]}