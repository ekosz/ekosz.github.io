{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/testing-elixir/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"8ff0e40c-467a-59c0-90f8-5e915964e858","excerpt":"When learning a new linage, one of the first steps one needs to take is\nlearning its testing frameworks. Elixir being a relatively new language, it\nonly has one…","html":"<p>When learning a new linage, one of the first steps one needs to take is\nlearning its testing frameworks. Elixir being a relatively new language, it\nonly has one ExUnit. In this blog post, I’ll walk you through writing your\nfirst tests.</p>\n<p>First thing to note are that Elixir tests are written in <code class=\"language-text\">.exs</code> files, not the\nstandard <code class=\"language-text\">.ex</code> Elixir file format. <code class=\"language-text\">.exs</code> files are written in the Elixir\nlanguage, but are never compiled only ever interpreted.</p>\n<p>Now lets jump into some code. First lets create a test helper.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir test\n$ touch test/test_helper.exs\n\n### Inside test_helper.exs\n\nExUnit.start []</code></pre></div>\n<p>Thats all we need to get started. We can later put utility methods in here, if\nthey’re needed. Now lets write a testing module.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### Inside adder_test.exs\n\nCode.require_file \"../test_helper\", __FILE__\n\ndefmodule Adder.Test do\n  use ExUnit.Case, async: true\nend</code></pre></div>\n<p>Here we do a few things. Require the test_helper file we just wrote, create\nthe module we will fill with tests, and import the ExUnit.Case methods. One\nthing to note here is the async option on ExUnit.Case. When set to true, all\nthe of the tests will run in parallel. Whenever possible set this to true. Lets\nwrite a test.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test \"adds one and one correctly\" do\n  assert 2 == 1 + 1\nend</code></pre></div>\n<p>Like many other languages ExUnit uses the standard assert clauses, but wraps\nthem in a test block. We can run this test with the command <code class=\"language-text\">elixir test/adder_test.exs</code>. If everything was written correctly you should see:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n\n1 test, 0 failures.</code></pre></div>\n<p>Woot! We ran our first Elixir test. Now lets stream line the process with\na shell script.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Inside tester.sh\n\nelixir -r \"lib/**/*.ex\" -r \"test/test_helper.exs\" -pr \"test/**/*_test.exs\"</code></pre></div>\n<p>This script will load every <code class=\"language-text\">.ex</code> file in your lib directory, then require the\ntest helper, and then load each test file sequentially.</p>\n<p>Thats it. Now just <code class=\"language-text\">sh tester.sh</code> to run all your tests. Have fun!</p>","frontmatter":{"title":"Testing Elixir","date":"July 30, 2012","description":null}},"previous":{"fields":{"slug":"/archive/simple-tcp-server-in-elixir/"},"frontmatter":{"title":"Simple TCP server in Elixir"}},"next":{"fields":{"slug":"/archive/elixir-make-files/"},"frontmatter":{"title":"Elixir make files"}}},"pageContext":{"id":"8ff0e40c-467a-59c0-90f8-5e915964e858","previousPostId":"f34a1e74-5480-51e7-bf5e-49981c27e8a2","nextPostId":"cbf6bee7-0444-5a7f-9705-a529d8123357"}},
    "staticQueryHashes": ["2841359383","3257411868"]}