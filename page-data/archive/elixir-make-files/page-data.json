{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/elixir-make-files/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"cbf6bee7-0444-5a7f-9705-a529d8123357","excerpt":"One of the common practices in Elixir is to use Makefiles and the Make compiling\nutility. Make was first released in 1977 and can be found installed on almost…","html":"<p>One of the common practices in Elixir is to use Makefiles and the Make compiling\nutility. Make was first released in 1977 and can be found installed on almost\nall *nix systems. Make uses a series of commands to compile projects. These\ncommands are written in a Makefile. When Make runs, it checks to see if\na Makefile exists in the current directory, and if so uses it.</p>\n<p>Makefiles can be tricky if you don’t know what you’re doing, so in this post\nI’ll try an explain the base Makefile I use in my Elixir projects.</p>\n<p>First thing to do is pick a location for our compiled code. I normally use the\nebin directory. Lets set that to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">EBIN_DIR=ebin</code></pre></div>\n<p>Variables in Make are set using capital letters. Next we need to write our compile\ntask.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">compile: ebin\n\nebin: lib/*.ex\n  @ rm -f ebin/::*.beam\n  @ echo Compiling ...\n  @ mkdir -p $(EBIN_DIR)\n  @ touch $(EBIN_DIR)\n  elixirc lib/**/*.ex -o $(EBIN_DIR)\n  @ echo</code></pre></div>\n<p>Tasks are written with the task name on the left, then a series of targets on\nthe right. A target can be a group of files, or another task. If the target is\na group of files, the task will only execute if the files have changed since it\nlast ran.</p>\n<p>In this case our compile task’s only target is the ebin task, though more can\nbe added later. The ebin task watches all of the <code class=\"language-text\">.ex</code> files in the lib\ndirectory. If any of them have changed since the last time the task was run, it\nwill remove all of the old compiled code, make sure the ebin directory\nexists, then use the <code class=\"language-text\">elixirc</code> command to compile the code and output the\nresult to the ebin.</p>\n<p>Using make we can also create a test task.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test: compile\n  @ echo Running tests ...\n  time elixir -pa ebin -r \"test/**/*_test.exs\"\n  @ echo</code></pre></div>\n<p>Our test task makes sure the code is compiled, the uses the regular <code class=\"language-text\">elixir</code>\ncommand to load up the compiled code, then execute all of the tests.</p>\n<p>Using Make, we can continue to add tasks to our program automating any\nprocedure we seem to be doing over and over again.</p>","frontmatter":{"title":"Elixir make files","date":"July 31, 2012","description":null}},"previous":{"fields":{"slug":"/archive/testing-elixir/"},"frontmatter":{"title":"Testing Elixir"}},"next":{"fields":{"slug":"/archive/outdated-in-60-secs/"},"frontmatter":{"title":"Outdated in 60 secs"}}},"pageContext":{"id":"cbf6bee7-0444-5a7f-9705-a529d8123357","previousPostId":"8ff0e40c-467a-59c0-90f8-5e915964e858","nextPostId":"7e712969-43c8-56ed-9d71-a1905ba421e6"}},
    "staticQueryHashes": ["2841359383","3257411868"]}