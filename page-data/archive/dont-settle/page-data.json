{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/dont-settle/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"0f4e2961-f0bc-5198-b1a8-cfbc3b207bd5","excerpt":"The goal for unit testing is 100% test coverage, but most developers will tell\nyou that not everything will be able to be tested. Most programmers settle for\n9…","html":"<p>The goal for unit testing is 100% test coverage, but most developers will tell\nyou that not everything will be able to be tested. Most programmers settle for\n99% coverage. Don’t do that.</p>\n<p>There is no good enough when it comes to unit testing. Every line of code\nof your program should be executed at least once. Lets take a look at an\nexample of code that is normally not tested.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_move_from_user</span></span>\n  cords <span class=\"token operator\">=</span> <span class=\"token variable\">@io</span><span class=\"token punctuation\">.</span>gets<span class=\"token punctuation\">.</span>chomp\n\n  <span class=\"token keyword\">raise</span> <span class=\"token class-name\">IllegalMove</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Bad input\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unless</span> cards <span class=\"token operator\">=~</span> <span class=\"token regex-literal\"><span class=\"token regex\">/^\\d+$/</span></span>\n\n  cords\n<span class=\"token keyword\">rescue</span> IllegalMove <span class=\"token operator\">=></span> error\n  display_text <span class=\"token string-literal\"><span class=\"token string\">\"Illegal Move: </span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">error<span class=\"token punctuation\">.</span>message</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">. Please try again\"</span></span>\n  <span class=\"token keyword\">retry</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This example shows a rescue block with a retry. This is hard to test, as there\nis no good way to make sure that the exception was raised. Instead of skipping\nthose two lines, we can create a IOMock object that takes an array of input to\nreturn one at a time.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOMock</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@input</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">gets</span></span>\n    <span class=\"token variable\">@input</span><span class=\"token punctuation\">.</span>pop\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This now allows us to pass in multiple inputs, the first failing and the second\nsucceeding.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_get_move_from_user</span></span>\n  mover <span class=\"token operator\">=</span> <span class=\"token class-name\">Mover</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IOMock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'1'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'a'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  assert_equal <span class=\"token string-literal\"><span class=\"token string\">'1'</span></span><span class=\"token punctuation\">,</span> mover<span class=\"token punctuation\">.</span>get_move_from_user\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Suddenly we’re two lines closer to 100%.</p>\n<p>Don’t settle. There is almost always a way to get 100%, and if not, you may be\ndoing something wrong.</p>","frontmatter":{"title":"Don't settle for 99%","date":"August 07, 2012","description":null}},"previous":{"fields":{"slug":"/archive/otp-gen-server-part-ii/"},"frontmatter":{"title":"OTP: Gen Server part II"}},"next":{"fields":{"slug":"/archive/impressing-your-friends-with-ruby/"},"frontmatter":{"title":"Impressing your friends with Ruby"}}},"pageContext":{"id":"0f4e2961-f0bc-5198-b1a8-cfbc3b207bd5","previousPostId":"301b1c1e-cb36-579a-9a04-9fde9b57e418","nextPostId":"8b1cb7f9-8376-5e53-acf9-38b0fa33c6a4"}},
    "staticQueryHashes": ["2841359383","3257411868"]}