{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/tracking-down-slow-code/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"129d85bc-3b26-5acf-8781-f6cf2b80b14d","excerpt":"Sometimes code runs slowly. A method call takes longer than you expect, and\nyour application starts becoming unresponsive. When this happens, having the\nknowâ€¦","html":"<p>Sometimes code runs slowly. A method call takes longer than you expect, and\nyour application starts becoming unresponsive. When this happens, having the\nknow-how and the proper tools becomes invaluable.</p>\n<p>The first thing when solving any software problem, is to write a failing test.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">describe TheProblem do\n  context \"performace\" do\n    before { require 'benchmark' }\n\n    it \"will not be slow\" do\n      # Should not take more than 200 miliseconds\n      Benchmark.realtime { subject.big_method }.should &lt; 0.2\n    end\n  end\nend</code></pre></div>\n<p>After making sure the test if failing, its time to get started finding where\nthe delay is coming from. This is what my method looked like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def big_method\n  80.times do |i|\n    32.times do |j|\n      @world.at(i, j).draw\n    end\n  end\nend</code></pre></div>\n<p>Now where is the delay coming from? The loops? The #at method? Or the #draw\nmethod? Using irb I tested each one.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> Benchmark.realtime { 80.times { |i| 32.times { |j| } } }\n=> 0.0003819465637207031\n\n> Benchmark.realtime { Tile.new.draw }\n=> 0.0006836104814734871\n\n> Benchmark.realtime { World.new.at(0, 0) }\n=> 0.0324843261943507120</code></pre></div>\n<p>Bingo! The slowdown is in the #at method. Now wash rinse and repeat using the\ncode in the #at method.</p>\n<p>It turned out, eventually my code called Array#transpose which is a very slow\npiece of code. I changed <code class=\"language-text\">array.transpose[x][y]</code> to <code class=\"language-text\">array[y][x]</code> and my\nfailing test passed.</p>","frontmatter":{"title":"Tracking down slow code","date":"July 20, 2012","description":null}},"previous":{"fields":{"slug":"/archive/getting-started-with-ruby-curses/"},"frontmatter":{"title":"Getting started with Ruby curses"}},"next":{"fields":{"slug":"/archive/clojure-first-impressions/"},"frontmatter":{"title":"Clojure first impressions"}}},"pageContext":{"id":"129d85bc-3b26-5acf-8781-f6cf2b80b14d","previousPostId":"0ed22dbf-1302-5bbf-9854-df2c486b0081","nextPostId":"6aa2d6d8-a146-54d3-8ecf-20c4bbd66dc8"}},
    "staticQueryHashes": ["2841359383","3257411868"]}