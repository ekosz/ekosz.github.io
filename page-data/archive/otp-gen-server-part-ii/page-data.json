{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/otp-gen-server-part-ii/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"301b1c1e-cb36-579a-9a04-9fde9b57e418","excerpt":"In my last post I introduced the concept of OTP and gen_server. This post\nI hope to dive deeper into gen_server. We’ve already seen the handle_cast callback…","html":"<p>In my last post I introduced the concept of OTP and gen_server. This post\nI hope to dive deeper into gen_server.</p>\n<p>We’ve already seen the handle_cast callback method, but there are many other\ncallbacks in gen_server. Lets take a look at a couple.</p>\n<h3>handle_call(method, state)</h3>\n<p>handle_call is much like handle_cast as it in charge of updating the state of\nthe server, but it is used for asynchronous updates.</p>\n<p>handle_cast normally responds <code class=\"language-text\">{:reply, result, new_state}</code>, but handle_call\nnormally responds <code class=\"language-text\">{:noreply, new_state}</code>. handle_call should be used\nwhenever the method doesn’t need to know who is calling it, as well as doesn’t\nneed to return anything to its caller.</p>\n<h3>handle_info(message, state)</h3>\n<p>handle_info responds the same as handle_call, but it gets called when random\nmessages are sent to the server through the <code class=\"language-text\">&lt;-</code> operator. Normally this\ndoesn’t update the state of the server, but that is up to the developer.</p>\n<h3>terminate(reason, state)</h3>\n<p>The terminate method is called when the server is shutting down. This could\nbecause of an error, one of the other methods told the server to shutdown, or\nits parent is shutting down. The callback is only in charge of cleanup and doesn’t\nreturn anything.</p>\n<h3>code_change(old, state, extra)</h3>\n<p>The code_change callback is called when the servers code is being updated.\nThe old parameter is a version number. This method makes sure that the state\nis in a position where is can handle the code change. Don’t worry about the\nextra parameter here it isn’t used other than large Erlang frameworks. This\nmethod should return <code class=\"language-text\">{:ok, new_state}</code>.</p>","frontmatter":{"title":"OTP: Gen Server part II","date":"August 06, 2012","description":null}},"previous":{"fields":{"slug":"/archive/otp-gen-server/"},"frontmatter":{"title":"OTP: Gen Server"}},"next":{"fields":{"slug":"/archive/dont-settle/"},"frontmatter":{"title":"Don't settle for 99%"}}},"pageContext":{"id":"301b1c1e-cb36-579a-9a04-9fde9b57e418","previousPostId":"4a967dfe-56ea-572b-8f7e-debdb0a90cf1","nextPostId":"0f4e2961-f0bc-5198-b1a8-cfbc3b207bd5"}},
    "staticQueryHashes": ["2841359383","3257411868"]}