{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/oauth-in-clojure/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"e8b235c1-6163-5d7d-97db-90d2da75ce34","excerpt":"Recently in my Clojure project we had to integrate with Google’s OAuth for\nauthenticating our users. It was a pretty painful process, so here’s a quick\nguide…","html":"<p>Recently in my Clojure project we had to integrate with Google’s OAuth for\nauthenticating our users. It was a pretty painful process, so here’s a quick\nguide for anyone that wants to do this in the future.</p>\n<p>For this guide I will be using <code class=\"language-text\">stuarth/clj-oauth2 \"0.3.2\"</code>. First add that as\na dependency to your project.clj file. Next lets create a authentication\nmodule.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> authentication\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span>\n    <span class=\"token punctuation\">[</span>cheshire.core <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>parse-string<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>clj-oauth2.client <span class=\"token symbol\">:as</span> oauth2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> login-uri\n  <span class=\"token string\">\"https://accounts.google.com\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> google-com-oauth2\n  <span class=\"token punctuation\">{</span><span class=\"token symbol\">:authorization-uri</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">str</span> login-uri <span class=\"token string\">\"/o/oauth2/auth\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token symbol\">:access-token-uri</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">str</span> login-uri <span class=\"token string\">\"/o/oauth2/token\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token symbol\">:redirect-uri</span> <span class=\"token string\">\"http://localhost:8080/authentication/callback\"</span>\n   <span class=\"token symbol\">:client-id</span> <span class=\"token string\">\"CLIENT\"</span>\n   <span class=\"token symbol\">:client-secret</span> <span class=\"token string\">\"CLIENT-SECRET\"</span>\n   <span class=\"token symbol\">:access-query-param</span> <span class=\"token symbol\">:access_token</span>\n   <span class=\"token symbol\">:scope</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://www.googleapis.com/auth/userinfo.email\"</span><span class=\"token punctuation\">]</span>\n   <span class=\"token symbol\">:grant-type</span> <span class=\"token string\">\"authorization_code\"</span>\n   <span class=\"token symbol\">:access-type</span> <span class=\"token string\">\"online\"</span>\n   <span class=\"token symbol\">:approval_prompt</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> auth-req\n  <span class=\"token punctuation\">(</span><span class=\"token function\">oauth2/make-auth-request</span> google-com-oauth2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn-</span> google-access-token <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">oauth2/get-access-token</span> google-com-oauth2 <span class=\"token punctuation\">(</span><span class=\"token symbol\">:params</span> request<span class=\"token punctuation\">)</span> auth-req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn-</span> google-user-email <span class=\"token punctuation\">[</span>access-token<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>response <span class=\"token punctuation\">(</span><span class=\"token function\">oauth2/get</span> <span class=\"token string\">\"https://www.googleapis.com/oauth2/v1/userinfo\"</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:oauth</span> access-token<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse-string</span> <span class=\"token punctuation\">(</span><span class=\"token symbol\">:body</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; Redirect them to (:uri auth-req)</span>\n\n<span class=\"token comment\">;; When they comeback to /authentication/callback</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">google-user-email</span>  <span class=\"token comment\">;=> user's email trying to lgo in</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">google-access-token</span> *request*<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So what did we do here? First of all we required the OAuth2 dependency into\nour namespace. We also included cheshire, Clojure’s JSON parsing library. Then we\ncreated a hash <code class=\"language-text\">google-com-oauth2</code>. This hash contains all of the information Google\nneeds when we request a OAuth2 access token. Replace the :client-id and\n:client-secret with the values you get from Google when you set up your Google\napplication. Also be sure that your :redirect-uri matches the one you supplied\nGoogle.</p>\n<p>Using this data has we can construct a auth-req using our OAuth2 library. When\nusers go to our application, when they try and log on the app should redirect\nthem to <code class=\"language-text\">(:uri authentication/auth-req)</code>.</p>\n<p>When the user gets back to our application it will be at out callback uri.\nThe request params of this request should look like,</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">{</span><span class=\"token symbol\">:code</span> \"<span class=\"token number\">4</span>/dasfjkhadsfkalsdasdfaskjf<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this request object we can get back a access-token from Google. Finally\nonce we have an access token, we get start making oauth/get’s to retrieve user\ninfo from Google. I’ve written the method google-user-email, but you can get\nother values from the user if you change the scope of your request.</p>","frontmatter":{"title":"Google oauth in Clojure","date":"August 23, 2012","description":null}},"previous":{"fields":{"slug":"/archive/overriding-functions-in-clojure/"},"frontmatter":{"title":"Overriding functions in Clojure"}},"next":{"fields":{"slug":"/archive/pain-based-programming/"},"frontmatter":{"title":"Pain based programming"}}},"pageContext":{"id":"e8b235c1-6163-5d7d-97db-90d2da75ce34","previousPostId":"c35247d6-ec7f-55a1-9b3a-eed5f6cfcd22","nextPostId":"1957017c-a5ef-5d7d-a3a1-dfa2ef07578d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}