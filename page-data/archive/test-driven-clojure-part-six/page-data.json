{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/test-driven-clojure-part-six/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"83fd09d7-7858-528f-8b60-78f6d3ff48c9","excerpt":"Now we have a text displayed on our site, but its not very pretty. To add some semantic\nmarkup we’re going to have to use HTML. We’ll be writing HTML in pure…","html":"<p>Now we have a text displayed on our site, but its not very pretty. To add some semantic\nmarkup we’re going to have to use HTML. We’ll be writing HTML in pure Clojure\ncode using a library called Hiccup.</p>\n<h3>Introduction to Hiccup</h3>\n<p>Lets first create a layout file for our entire site. This layout will be used\non every page. Lets add it in a util folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; src/util/layout.hiccup</span>\n<span class=\"token punctuation\">[</span><span class=\"token symbol\">:html</span>\n  <span class=\"token punctuation\">[</span><span class=\"token symbol\">:head</span>\n    <span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span> <span class=\"token string\">\"Kachie - The Backpage of the Web!\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span><span class=\"token symbol\">:body</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">eval</span> <span class=\"token punctuation\">(</span><span class=\"token symbol\">:template-body</span> joodo.views/*view-context*<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The first thing you’ll notice about the code above, is that its pure Clojure.\nUnlike other HTML generating markup languages, Hiccup doesn’t use any fancy\nDSLs (Domain Specific Languages). Every tag is represented by a vector, where\nthe first element in the tag is a keyword that acts as the name of the name.\nEmbedded tags are just embedded vectors. If we want to give our tag a value,\nlike the title tag, we pass it as a string.</p>\n<p>The <code class=\"language-text\">eval</code> line will insert the HTML that is specific to a certain page.</p>\n<p>Lets try using this layout file in our homepage route.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">with-mock-rendering</span> <span class=\"token symbol\">:strict</span> <span class=\"token boolean\">true</span> <span class=\"token symbol\">:template-root</span> <span class=\"token string\">\"katchie\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">it</span> <span class=\"token string\">\"displays a homepage with HTML\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">do-get</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">should=</span> <span class=\"token string\">\"home\"</span> <span class=\"token operator\">@</span>rendered-template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>After using the helper method <code class=\"language-text\">with-mock-rendering</code> Joodo provides us with the\nreference <code class=\"language-text\">@rendered-template</code> after we make a request to our application. This\ntest should fail, telling us that @rendered-template is nil. Lets fix that.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> katchie.core\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span> <span class=\"token punctuation\">[</span>joodo.views <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>render-template<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> app-handler <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">{</span><span class=\"token symbol\">:status</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n   <span class=\"token symbol\">:headers</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token symbol\">:body</span> <span class=\"token punctuation\">(</span><span class=\"token function\">render-template</span> <span class=\"token string\">\"home\"</span>\n                          <span class=\"token symbol\">:layout</span> <span class=\"token string\">\"util/layout\"</span>\n                          <span class=\"token symbol\">:template-root</span> <span class=\"token string\">\"katchie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lets use a new Joodo helper method, <code class=\"language-text\">render-template</code>. Instead of us creating\nthe response hash from scratch, <code class=\"language-text\">render-template</code> will do that work for us.\nThe first argument is the template to load, and then many optional arguments.\nThe first of which is <code class=\"language-text\">:layout</code> and it points the layout file we want to\nuse. Another optional argument is <code class=\"language-text\">:template-root</code>, which is where the root of\nour template is located. By default Joodo looks is src/views for the layout\nfile, but we’re not going to architect our application like that.</p>\n<p>Running the test now gives us a new error.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Template Not Found: katchie/home.hiccup[.clj]</code></pre></div>\n<p>We need the create the template file its looking for. Lets create a short\nintroduction to our app.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; src/katchie/home.hiccup</span>\n<span class=\"token punctuation\">[</span><span class=\"token symbol\">:div</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:class</span> <span class=\"token string\">\"headline\"</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">[</span><span class=\"token symbol\">:h1</span> <span class=\"token string\">\"Kachie\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span><span class=\"token symbol\">:h2</span> <span class=\"token string\">\"Where dreams DO come true\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You’ll notice I used a new technique in the hiccup file. If you’ve done any HTML\ndevelopment in the past, you know that HTML tags can have many arguments.\nArguments in Hiccup are passed as a hash-map as the second option of a tag\nvector.</p>\n<p>Now we have passing tests. Booting up the server with <code class=\"language-text\">lein joodo server</code> and\nviewing our application in our browser you should see…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Kachie\n\nWhere dreams DO come true</code></pre></div>","frontmatter":{"title":"Test driven Clojure part VI","date":"October 15, 2012","description":null}},"previous":{"fields":{"slug":"/archive/test-driven-clojure-part-five/"},"frontmatter":{"title":"Test driven clojure part V"}},"next":{"fields":{"slug":"/archive/writing-a-super-simple-lisp-interpreter/"},"frontmatter":{"title":"Writing a super simple lisp interpreter"}}},"pageContext":{"id":"83fd09d7-7858-528f-8b60-78f6d3ff48c9","previousPostId":"b5253fcd-03b8-5360-abfe-da2bdbb42440","nextPostId":"db56a098-0f9f-5280-ae48-b77b709ffb5d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}