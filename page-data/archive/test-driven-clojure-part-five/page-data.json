{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/test-driven-clojure-part-five/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"b5253fcd-03b8-5360-abfe-da2bdbb42440","excerpt":"We now have passing tests, but our website isn’t very functional. Lets add\na home page for our (soon to be) millions of visitors. Writing our first Joodo-based…","html":"<p>We now have passing tests, but our website isn’t very functional. Lets add\na home page for our (soon to be) millions of visitors.</p>\n<h3>Writing our first Joodo-based test</h3>\n<p>Lets write a test that makes sure that we get a 200 response back from the\nserver when we acsess the root path.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">it</span> <span class=\"token string\">\"displays a homepage\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>response <span class=\"token punctuation\">(</span><span class=\"token function\">do-get</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">should=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">(</span><span class=\"token symbol\">:status</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">do-get</code> is a method given to us by the joodo.spec-helper.controller namespace.\nIt sends an imaginary post to the path, and seconds the result. The result is\na hash-map of <code class=\"language-text\">{:status ..., :headers ..., :body ...}</code>.</p>\n<p>Running this test, we get our next error. Yay!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.F\n\nFailures:\n\n  1) Katchie displays a homepage\n     Attempting to call unbound fn: #'joodo.spec-helpers.controller/*routes*</code></pre></div>\n<p>What does this mean? Its our most un-helpful message yet. The problem is that\nthe <code class=\"language-text\">do-get</code> method doesn’t know what Joodo controller to test. The joodo\nspec-helpers gives us a message that will point our tests to the right\nlocation.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">with-routes</span> app-handler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Adding that line to our tests will tell Joodo to use the app-handler.\nUnfortunately we haven’t built a app handler yet and we get another error.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">java.lang.RuntimeException: Unable to resolve symbol: app-handler in this context</code></pre></div>\n<p>Lets create that handler in our core.clj file.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> katchie.core<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> app-handler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Running again we get another error. Remember whenever the message we get back\nchanges, we’re making progress.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Attempting to call unbound fn: #'katchie.core/app-handler</code></pre></div>\n<p>Looks like app-hander is meant to be a function. Lets change the definition of\napp-hander to reflect that.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> katchie.core<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> app-handler <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">lein spec</code> gives us our next error.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Wrong number of args (1) passed to: core$app-handler</code></pre></div>\n<p>Great! Now we know that our app-handler has to take an argument. We don’t\nknow what that argument is yet, but we’re slowly learning about Joodo and how\nit works. Lets rewrite our app-hander method to take that argument then print\nit out to the console.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> katchie.core<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> app-handler <span class=\"token punctuation\">[</span>thing<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">println</span> thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ lein spec\n.{:request-method :get, :uri /}\nF\n\nFailures:\n\n  1) Katchie displays a homepage\n     Expected: &lt;200>\n          got: nil (using =)</code></pre></div>\n<p>We’ve now discovered the last two pieces of information we need to realize\nhow Joodo works. The first is obvious, the argument we receive is the request\nhash-map. Is has a :request-method key and a :uri key. The second piece of\ninformation we’ve gathered is more hidden. Joodo expects this method to return\na response hash. The test is currently calling (:status nil) which returns\nnil.</p>\n<p>One more rewrite of our core.clj file is all we need to get this test to pass.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> katchie.core<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> app-handler <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">{</span><span class=\"token symbol\">:status</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:headers</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:body</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">..\n\nFinished in 0.00065 seconds\n2 examples, 0 failures</code></pre></div>\n<p>Perfect we’ve gotten our test to pass and written just enough code to have\na fully working Joodo application. We can test it out by running <code class=\"language-text\">lein joodo server</code>.</p>\n<p>After that command you can direct your browser to localhost:8080 and see the\nfruit of your labor.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP ERROR 500\n\nProblem accessing /. Reason:\n\n    java.lang.RuntimeException: java.io.FileNotFoundException: config/environment.clj (No such file or directory)</code></pre></div>\n<p>Well thats not good. Looks like Joodo was expecting a config/environment.clj\nfile to exist. Lets create that quickly.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; config/environment.clj</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">alter-env!</span> assoc\n  <span class=\"token symbol\">:joodo.root.namespace</span> <span class=\"token string\">\"katchie.core\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This tells Joodo that its root name space is that core file we just created.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP ERROR 500\n\nProblem accessing /. Reason:\n\n    java.lang.RuntimeException: java.io.FileNotFoundException: config/development.clj (No such file or directory)</code></pre></div>\n<p>Well another file missing. Lets create that too.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">alter-env!</span> assoc\n  <span class=\"token symbol\">:joodo-env</span> <span class=\"token string\">\"development\"</span>\n  <span class=\"token symbol\">:hostname</span> <span class=\"token string\">\"localhost:8080\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This file sets some global configuration for our development environment. One\nlast time into the breach. Lets start our server and see what we get.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello world!</code></pre></div>\n<p>You did it! Congratulations on creating your first Joodo application.</p>","frontmatter":{"title":"Test driven clojure part V","date":"October 11, 2012","description":null}},"previous":{"fields":{"slug":"/archive/test-driven-clojure-part-four/"},"frontmatter":{"title":"Test driven Clojure part IV"}},"next":{"fields":{"slug":"/archive/test-driven-clojure-part-six/"},"frontmatter":{"title":"Test driven Clojure part VI"}}},"pageContext":{"id":"b5253fcd-03b8-5360-abfe-da2bdbb42440","previousPostId":"e3443845-f57d-55cf-a633-dc2a56ed0766","nextPostId":"83fd09d7-7858-528f-8b60-78f6d3ff48c9"}},
    "staticQueryHashes": ["2841359383","3257411868"]}