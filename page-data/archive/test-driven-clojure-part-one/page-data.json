{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/test-driven-clojure-part-one/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"caf72bd7-680f-59f8-ac91-6fbe7e64d17a","excerpt":"Welcome to my new series Test Driven Clojure. In these series of blog posts\nwe’ll use a collection of open source tools and best testing practices to\ncreate a…","html":"<p>Welcome to my new series Test Driven Clojure. In these series of blog posts\nwe’ll use a collection of open source tools and best testing practices to\ncreate a social news aggregation site from scratch.</p>\n<h3>Tools</h3>\n<p>The tools we’ll be using for this project are all free and open source. After\ncompleting this series feel free to go back and swap out some of these tools\nfor others that do the same job.</p>\n<p><a href=\"https://github.com/technomancy/leiningen\">Leiningen</a>: At the time of this\nwriting Leiningen has become the de facto tool for managing dependencies in\nClojure. After an initial setup, Leiningen makes easy work of downloading\nexternal libraries and installing them.</p>\n<p><a href=\"https://github.com/slagyr/joodo\">Joodo</a>: Joodo is a lightweight web framework built\noff of another popular Clojure project Ring. Joodo uses Ring’s Router and\nprovides us an simple API for creating complex web applications. Joodo will\nhandle all of the HTTP communication for us, letting us focus on the behavior of\nour application.</p>\n<p><a href=\"https://github.com/8thlight/hyperion\">Hyperion</a>: Our application will\neventually need to store data between requests, or it wouldn’t make for a very\ngood website. So how are we going to save our data? A SQL database? A NoSQL DB?\nThere are too many choices of datastores in the wild currently. As responsible\nengineers, we’re not going to make such an important choice about our\napplication until we know more about our requirements. Hyperion lets us stay\nagile and flexible our development process. Hyperion provides a single API\nthat can then be hooked into many concrete databases later. Using Hyperion we\ncan nearly wait until the project is completed before we’re forced to pick\na data saving scheme.</p>\n<p><a href=\"https://github.com/weavejester/hiccup\">Hiccup</a>: Recently there has been\na trend in web applications to move to fat javascript heavy web apps. Views\nare rendered client side and simple JSON data is piped in from the server.\nThat is NOT what we’re going to be doing. We will be rendering our views\nserver side in Hiccup. Hiccup follows the Clojure idiom of using data as code\nand provides a clean way of generating HTML.</p>\n<p><a href=\"https://github.com/slagyr/speclj\">Speclj</a>: This wouldn’t be a very good series\non testing if we didn’t have a tool for writing good tests. Speclj provides\nClojure developers with a Rspec-esk API for writing BDD style tests.</p>","frontmatter":{"title":"Test driven Clojure part I","date":"October 01, 2012","description":null}},"previous":{"fields":{"slug":"/archive/handling-errors-in-java/"},"frontmatter":{"title":"Handling errors in Java"}},"next":{"fields":{"slug":"/archive/test-driven-clojure-part-two/"},"frontmatter":{"title":"Test driven Clojure part II"}}},"pageContext":{"id":"caf72bd7-680f-59f8-ac91-6fbe7e64d17a","previousPostId":"05602069-a689-520d-bb18-f918a9dfc75d","nextPostId":"c13d6784-0ca3-539a-b65b-900b4932069e"}},
    "staticQueryHashes": ["2841359383","3257411868"]}