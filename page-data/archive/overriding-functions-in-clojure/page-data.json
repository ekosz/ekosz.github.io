{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/overriding-functions-in-clojure/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"c35247d6-ec7f-55a1-9b3a-eed5f6cfcd22","excerpt":"While testing in an OO language it is common to mock objects out of the\npicture. This could be do the fact that the object not yet implemented or\nmaybe it calls…","html":"<p>While testing in an OO language it is common to mock objects out of the\npicture. This could be do the fact that the object not yet implemented or\nmaybe it calls out to the third party service you rather not use when testing.</p>\n<p>Clojure provides us some tools to do the same thing with functions we may want\nto mock out.</p>\n<h3>Dependency Injection</h3>\n<p>Like OO languages you can use dependency injection in a functional language like\nClojure. Lets say we have the following function.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> do-work-son <span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">third-party/big-function</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>While testing we don’t want to have to wait for the third parts big function to\nrun. We can re-write the function to take a second argument of what function to\nrun on the argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> do-work-son <span class=\"token punctuation\">[</span>arg worker<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">worker</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we can pass what ever we want to the function. In production we call,</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">do-work-son</span> <span class=\"token string\">\"arg\"</span> third-party/big-function<span class=\"token punctuation\">)</span></code></pre></div>\n<p>While during the test we can do some thing like,</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">do-work-son</span> <span class=\"token string\">\"arg\"</span> <span class=\"token operator\">#</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">*</span> % <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Just to test that the function is being called.</p>\n<h3>Redefinition</h3>\n<p>Sometimes Dependency Injection is just out of the question or would make your\ncode too complicated. At these times we can redefine functions at run time\nusing <code class=\"language-text\">with-redefs</code>. Here is the above example using this method.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token comment\">;; production code</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> do-work-son <span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">third-party/big-function</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;; test code</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">with-redefs</span> <span class=\"token punctuation\">[</span>third-part/big-function <span class=\"token operator\">#</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">*</span> % <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">do-work-son</span> <span class=\"token string\">\"arg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Overriding functions in Clojure","date":"August 22, 2012","description":null}},"previous":{"fields":{"slug":"/archive/screaming-architecture/"},"frontmatter":{"title":"Screaming architecture"}},"next":{"fields":{"slug":"/archive/oauth-in-clojure/"},"frontmatter":{"title":"Google oauth in Clojure"}}},"pageContext":{"id":"c35247d6-ec7f-55a1-9b3a-eed5f6cfcd22","previousPostId":"99a4ea89-518d-5547-a789-ce8ab8ac005b","nextPostId":"e8b235c1-6163-5d7d-97db-90d2da75ce34"}},
    "staticQueryHashes": ["2841359383","3257411868"]}