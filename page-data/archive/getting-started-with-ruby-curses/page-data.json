{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/getting-started-with-ruby-curses/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"0ed22dbf-1302-5bbf-9854-df2c486b0081","excerpt":"This week I was playing around with creating a complex terminal game.\nI immediately though about Curses. If you don’t know Curses is an old C library for…","html":"<p>This week I was playing around with creating a complex terminal game.\nI immediately though about Curses.</p>\n<p>If you don’t know Curses is an old C library for manipulating text in the\nterminal. It, and its newer brother NCurses, has been used to create\napplications from famous games to text editors.</p>\n<h3>The Good</h3>\n<p>I found out that Curses is actually built into most distributions of Ruby.\nThat means getting started with Curses is only a require away.</p>\n<h3>The Bad</h3>\n<p>Seeing how Curses is a 30+ year old library, its syntax is very un-ruby like and\nneeds a bit of knowhow.</p>\n<p>The first thing to when learning how to use Curses with Ruby is read the\n<a href=\"http://www.ruby-doc.org/stdlib-1.9.3/libdoc/curses/rdoc/Curses.html\">documentation on\nruby-doc.org</a>.\nThe documentation there gives some sample problems, and an intro to the syntax.\nUnfortunately, other than the sample problems the documentation is sadly\nlacking. Here’s some features that the docs don’t cover.</p>\n<h3>Colors</h3>\n<p>Colors in Curses a defined in terms of color_pairs. A color_pair is two\ncolors, the first being the foreground color and the second being the\nbackground. Color pairs must be defined before they are used.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Curses.init_pair(COLOR_BLUE,COLOR_BLUE,COLOR_BLACK)</code></pre></div>\n<p>This will create the COLOR_BLUE color pair with a blue foreground and a black\nbackground. Using this color pairs have a funny syntax as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Curses.attron(color_pair(COLOR_BLUE)|A_NORMAL) {\n  Curses.addstr(\"I'm in blue!!\")\n}</code></pre></div>\n<p>Curses.attron takes a hash of attributes that it then applies to the block it\nreceives. The color_pair and the A_NORMAL constant work together to create\na full attributes hash thats needed.</p>\n<p>It my next post I’ll talk about speed.</p>","frontmatter":{"title":"Getting started with Ruby curses","date":"July 19, 2012","description":null}},"previous":{"fields":{"slug":"/archive/the-danger-of-too-many-classes/"},"frontmatter":{"title":"The danger of too many classes"}},"next":{"fields":{"slug":"/archive/tracking-down-slow-code/"},"frontmatter":{"title":"Tracking down slow code"}}},"pageContext":{"id":"0ed22dbf-1302-5bbf-9854-df2c486b0081","previousPostId":"2c615873-0300-58d4-8f3d-1fbd221c152c","nextPostId":"129d85bc-3b26-5acf-8781-f6cf2b80b14d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}