{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/intro-to-hyperion/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"e800b199-c457-50b1-b7d5-e6fd82391631","excerpt":"Hyperion is a common datastore API for\nClojure. It wraps various databases in a common API and lets developers hold\noff the choosing of a DB. First off add…","html":"<p><a href=\"https://github.com/8thlight/hyperion\">Hyperion</a> is a common datastore API for\nClojure. It wraps various databases in a common API and lets developers hold\noff the choosing of a DB.</p>\n<p>First off add Hyperion to your project.clj file.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">defproject</span> sample <span class=\"token string\">\"0.0.1\"</span>\n  <span class=\"token symbol\">:dependencies</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>hyperion/core <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next we can write a spec to test out the functionality of Hyperion. We’ll be\nusing <a href=\"http://speclj.com/\">Speclj</a> for the specs.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> sample.core-spec\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span>\n    <span class=\"token punctuation\">[</span>speclj.core <span class=\"token symbol\">:refer</span> <span class=\"token symbol\">:all</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>sample.core <span class=\"token symbol\">:refer</span> <span class=\"token symbol\">:all</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>hyperion.core <span class=\"token symbol\">:refer</span> <span class=\"token symbol\">:all</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>hyperion.memory <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>new-memory-datastore<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">describe</span> <span class=\"token string\">\"Hyperion\"</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">it</span> <span class=\"token string\">\"can store a value\"</span>\n            <span class=\"token punctuation\">(</span><span class=\"token function\">save</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:kind</span> <span class=\"token string\">\"test\"</span> <span class=\"token symbol\">:name</span> <span class=\"token string\">\"Eric\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">(</span><span class=\"token function\">should=</span> <span class=\"token string\">\"Eric\"</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">comp</span> <span class=\"token symbol\">:name</span> first find-by-kind<span class=\"token punctuation\">)</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is what the Hyperion API looks like. The <code class=\"language-text\">save</code> function takes a hash-map\nor record, and saves it to the datastore. Each hash-map should have a type,\nthis will be the collection the record is associated with. We then can use\nlookup APIs like <code class=\"language-text\">find-by-kind</code>. This method saves a kind and returns a vector\nof hash-maps that correspond to that type.</p>\n<p>Running this spec we get the error.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No Datastore bound (hyperion/*ds*) or installed (hyperion/DS).</code></pre></div>\n<p>We can fix this by setting the DB to be a in-memory database in our core.clj\nfile.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> sample.core\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span>\n    <span class=\"token punctuation\">[</span>hyperion.core <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>DS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>hyperion.memory <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>new-memory-datastore<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">reset!</span> DS <span class=\"token punctuation\">(</span><span class=\"token function\">new-memory-datastore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we have passing tests!</p>\n<p>We can add another test to make sure the database resets between tests.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">it</span> <span class=\"token string\">\"has a new database each test\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">save</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">:kind</span> <span class=\"token string\">\"test\"</span> <span class=\"token symbol\">:name</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">should=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">count</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find-by-kind</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This should fail in conjunction with the other test. We can fix it by wrapping\nour tests in a new-memory-datastore.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token function\">describe</span> <span class=\"token string\">\"Hyperion\"</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">around</span> <span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">]</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token keyword\">binding</span> <span class=\"token punctuation\">[</span>*ds* <span class=\"token punctuation\">(</span><span class=\"token function\">new-memory-datastore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token function\">it</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This binds a new-memory-datastore for each test. Specs should now be passing.</p>\n<p>The rest of the Hyperion API can be found on its <a href=\"https://github.com/8thlight/hyperion\">Github page</a>.\nAs of this writing Hyperion currently supports Google App Engine, MySQL,\nPostgres, Sqlite, Riak, and MongoDB. Using Hyperion the choosing a database\ncan happen far down the development pipeline as well switching out the DB is as\nsimple as changing a line of code.</p>","frontmatter":{"title":"Introduction to Hyperion","date":"August 27, 2012","description":null}},"previous":{"fields":{"slug":"/archive/pain-based-programming/"},"frontmatter":{"title":"Pain based programming"}},"next":{"fields":{"slug":"/archive/saving-parentheses-using-comp/"},"frontmatter":{"title":"Saving parentheses using comp"}}},"pageContext":{"id":"e800b199-c457-50b1-b7d5-e6fd82391631","previousPostId":"1957017c-a5ef-5d7d-a3a1-dfa2ef07578d","nextPostId":"2a8d3502-aac2-5124-b885-767a1071d451"}},
    "staticQueryHashes": ["2841359383","3257411868"]}