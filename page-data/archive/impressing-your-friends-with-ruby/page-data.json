{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/impressing-your-friends-with-ruby/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"8b1cb7f9-8376-5e53-acf9-38b0fa33c6a4","excerpt":"I’ve been programing in Ruby for a few years now and along the way I’ve picked\nup a few fun tricks that other programmers rarely seem to know about. These are…","html":"<p>I’ve been programing in Ruby for a few years now and along the way I’ve picked\nup a few fun tricks that other programmers rarely seem to know about. These are\ngood for showing off, but be careful using them in production code as they may\nhiding the meaning of what’s going on.</p>\n<h3>&#x26;method</h3>\n<p>Most Ruby developers know about calling &#x26; on a symbol to turn it into a proc.\nThis is mostly used in map functions like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:to_s</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> [\"1\", \"2\", \"3\"]</span>\n<span class=\"token comment\"># Is the same as</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>num<span class=\"token operator\">|</span> num<span class=\"token punctuation\">.</span>to_s <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Symbol to proc creates a proc that expects one argument then calls that method\non that argument. But what if we wanted to do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>num<span class=\"token operator\">|</span> something_awesome<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well this can be shortened too!</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>method<span class=\"token punctuation\">(</span><span class=\"token symbol\">:something_awesome</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Save 4 characters!</span></code></pre></div>\n<p>The <code class=\"language-text\">Object#method</code> method returns a method object corresponding to the symbol\nits given. We then turn that method object into a proc using the &#x26; operator.\nThat proc can then be used by the map function like any other proc.</p>\n<h3>concat strings with whitespace</h3>\n<p>There are a lot of ways to concat strings in Ruby.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token string-literal\"><span class=\"token string\">\"abc\"</span></span> <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\"def\"</span></span>      <span class=\"token comment\">#=> \"abcdef\"</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"abc\"</span></span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string-literal\"><span class=\"token string\">\"def\"</span></span>     <span class=\"token comment\">#=> \"abcdef\"</span>\n<span class=\"token string-literal\"><span class=\"token string\">\"abc\"</span></span><span class=\"token punctuation\">.</span>concat <span class=\"token string-literal\"><span class=\"token string\">\"def\"</span></span> <span class=\"token comment\">#=> \"abcdef\"</span></code></pre></div>\n<p>But did you know you can also use whitespace to concat ruby strings?</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token string-literal\"><span class=\"token string\">\"abc\"</span></span> <span class=\"token string-literal\"><span class=\"token string\">\"def\"</span></span> <span class=\"token comment\">#=> \"abcdef\"</span></code></pre></div>\n<p>Yep, that works and its valid ruby code. Why the Ruby developers thought that\nthis was a good language feature, I don’t know. But its there. This can cause\nissues when you’re creating an array from strings.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Woops forgot a comma</span>\n<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span> <span class=\"token string-literal\"><span class=\"token string\">\"c\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#=> [\"a\", \"bc\"]</span></code></pre></div>\n<h3>call with current continuation</h3>\n<p>Call with current continuation, or “callcc”, is a feature from Lisp that was\ncarried over to Ruby. It is a little hard to explain, so lets give an example\nto start.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">level_3</span></span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">)</span>\n  cont<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"RETURN THIS\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">level_2</span></span><span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">)</span>\n  level_3<span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"NEVER RETURNED\"</span></span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">top_level_function</span></span>\n  callcc <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>cc<span class=\"token operator\">|</span> level_2<span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n\nputs top_level_function <span class=\"token comment\"># => \"RETURN THIS\"</span></code></pre></div>\n<p>So whats going on here? The callcc method takes a block, and provides\na Continuation object. If this continuation object is ever called, the program\nwill immediately jump from where ever it is, to just outside the callcc block.\nThis acts much like other ruby control flow statements like <code class=\"language-text\">break</code>, <code class=\"language-text\">skip</code>, and\n<code class=\"language-text\">retry</code>. But instead of just jumping out of the current scope, it can jump as\nfar as it wants.</p>","frontmatter":{"title":"Impressing your friends with Ruby","date":"August 08, 2012","description":null}},"previous":{"fields":{"slug":"/archive/dont-settle/"},"frontmatter":{"title":"Don't settle for 99%"}},"next":{"fields":{"slug":"/archive/logicless-views/"},"frontmatter":{"title":"Logic-less views"}}},"pageContext":{"id":"8b1cb7f9-8376-5e53-acf9-38b0fa33c6a4","previousPostId":"0f4e2961-f0bc-5198-b1a8-cfbc3b207bd5","nextPostId":"d1698cd6-0742-57fa-a3c1-769c83243c3b"}},
    "staticQueryHashes": ["2841359383","3257411868"]}