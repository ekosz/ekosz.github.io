{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/code-katas/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"488c81b3-f7be-5eda-989b-feb8a1593b9a","excerpt":"When I was a kid I remember taking a karate class for gym. During the class\nwe were taught to perform “katas”. Katas were a series of moves that would be…","html":"<p>When I was a kid I remember taking a karate class for gym. During the class\nwe were taught to perform “katas”. Katas were a series of moves that would be\nperformed after one another in a set sequence. Almost like a dance. Right\npunch, left punch, right kick, left kick, etc. To a 8 year old I thought it was\nthe most boring thing in the world. And when I learned about Code Katas many\nyears later, I had the same wrong first impression.</p>\n<p>Code Katas are problems that programmer can preform over and over again. The\nfocus isn’t on the answer to the problem, but the process in which its solved.\nKatas are meant to help practice good TDD habits and train programmers to look\nat problems as a series of failing tests.</p>\n<p>Though katas may a first glace seem like a waste of time, they aren’t. After\ntrying out a few, and solving them over and over again I definitely felt the\nFlow. The Flow is the feeling one gets when they are doing TDD right. Red,\nGreen, Refactor. Almost every programmer knows this idiom, but I don’t think\nthey all have felt it. TDD, when done correctly, is a super responsive feed back\nloop.</p>\n<ol>\n<li>Don’t write any production code without writing failing test</li>\n<li>Don’t write more test code than it takes to create a failing test</li>\n<li>Don’t write more production code than it takes to pass the test</li>\n</ol>\n<p>When following these steps each TDD loop should take a little under a minute.\nAfter doing this 15 minutes strait one will start to feel the Flow, and\nproductivity will take off.</p>\n<p>Every programmer should practice katas as they teach how to get into the Flow.\nOnce in the Flow you’re biggest worry becomes how to make sure you’re not\ntaken out of the Flow.</p>","frontmatter":{"title":"Code katas","date":"July 24, 2012","description":null}},"previous":{"fields":{"slug":"/archive/clojure-first-impressions/"},"frontmatter":{"title":"Clojure first impressions"}},"next":{"fields":{"slug":"/archive/refactoring/"},"frontmatter":{"title":"Refactoring"}}},"pageContext":{"id":"488c81b3-f7be-5eda-989b-feb8a1593b9a","previousPostId":"6aa2d6d8-a146-54d3-8ecf-20c4bbd66dc8","nextPostId":"f8bb6beb-36c2-5fc4-8938-93ba28437200"}},
    "staticQueryHashes": ["2841359383","3257411868"]}