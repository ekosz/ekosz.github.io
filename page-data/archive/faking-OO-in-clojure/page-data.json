{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/faking-OO-in-clojure/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"48342327-49eb-5131-bf36-8fa564890316","excerpt":"When programming in a functional language, the often comes a time when we must\ncouple data to functions like in an Object Oriented language. I mostly see\nthis…","html":"<p>When programming in a functional language, the often comes a time when we must\ncouple data to functions like in an Object Oriented language. I mostly see\nthis happen in terms of databases and relations.</p>\n<p>In my hypothetical application I have users that have many documents. Here’s\nwhat their <a href=\"https://github.com/8thlight/hyperion\">Hyperion</a> protocols might look like.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> sample.user.user\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span> <span class=\"token punctuation\">[</span>hyperion.api <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>defentity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">defentity</span> User\n  <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> sample.document.document\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span> <span class=\"token punctuation\">[</span>hyperion.api <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>defentity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">defentity</span> Document\n  <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span>body<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span>user-key <span class=\"token symbol\">:type</span> <span class=\"token symbol\">:key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What if we wanted to add a method for users to get their corresponding\ndocuments? Follow certain conventions we can create a method that looks very OO.</p>\n<div class=\"gatsby-highlight\" data-language=\"clojure\"><pre class=\"language-clojure\"><code class=\"language-clojure\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">ns</span> sample.user.user\n  <span class=\"token punctuation\">(</span><span class=\"token symbol\">:require</span> <span class=\"token punctuation\">[</span>hyperion.api <span class=\"token symbol\">:refer</span> <span class=\"token punctuation\">[</span>defentity find-by-kind<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;defentity</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">defn</span> documents <span class=\"token punctuation\">[</span>this<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">find-by-kind</span> <span class=\"token string\">\"document\"</span> <span class=\"token symbol\">:filters</span> <span class=\"token punctuation\">[</span><span class=\"token symbol\">:=</span> <span class=\"token symbol\">:user-key</span> <span class=\"token punctuation\">(</span><span class=\"token symbol\">:key</span> this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>By using <code class=\"language-text\">this</code> as the name of the argument we are but into the mindset of\nmanipulating User hashes. Every function defined inside this namespace should\ntake a user hash as the first argument.</p>","frontmatter":{"title":"Faking OO in Clojure","date":"September 13, 2012","description":null}},"previous":{"fields":{"slug":"/archive/flash-messages-in-joodo/"},"frontmatter":{"title":"Flash messages in Joodo"}},"next":{"fields":{"slug":"/archive/handling-errors-in-java/"},"frontmatter":{"title":"Handling errors in Java"}}},"pageContext":{"id":"48342327-49eb-5131-bf36-8fa564890316","previousPostId":"957f1ec1-178a-5bbe-9ae8-3d81964045d8","nextPostId":"05602069-a689-520d-bb18-f918a9dfc75d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}