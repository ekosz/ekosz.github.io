{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/archive/sinatra-vs-rails/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Blog name here"}},"markdownRemark":{"id":"cc3f657e-b4ed-575e-b2c5-58b929fe60e0","excerpt":"When first getting into Ruby, I thought Rails was coolest thing since dynamic\nvariables. It was pure magic. Using a complicated mix of meta-programming and\nRuby…","html":"<p>When first getting into Ruby, I thought Rails was coolest thing since dynamic\nvariables. It was pure magic. Using a complicated mix of meta-programming and\nRuby Ninjaing in the background, Rails allows the average developer to do really\ncomplex things with only a few commands. And that was awesome.</p>\n<p>Today though, as much magic as Rails gives you, I feel that it really restricts\nyour ability to be expressive in your design. For example, when writing this\nblog, I used a technique where I duplicated each route. One route for AJAX calls,\none for regular calls.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">get '/posts/:m/:d/:y/:p' do |month, day, year, post|\n  full_page get_post [month, day, year, post].join('-')\nend\n\nget '/ajax/posts/:m/:d/:y/:p' do |month, day, year, post|\n  get_post [month, day, year, post].join('-')\nend</code></pre></div>\n<p>This was really simple. <code class=\"language-text\">get_post</code> returns the html needed for a single post,\nand <code class=\"language-text\">full_page</code> wraps the HTML given to it in everything outside of the main\ndiv.</p>\n<p>If I wanted I could have reduced the line count even further with some regex.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">get %r{^\\/(ajax\\/)?posts\\/(\\d+)\\/(\\d+)\\/(\\d+)\\/([^\\/]+)$} do |ajax, month, year, day, post|\n  post = get_post [month, day, year, post].join('-')\n  ajax.empty? ? full_page post : post\nend</code></pre></div>\n<p>Though for 2 extra lines, you get a lot more readability. BUT, the power it\nstill there if you want to wield it.</p>\n<p>If I wanted to do this in Rails, it wouldn’t nearly feel as fun and free\nspirited. I would have to create a couple controllers, break REST\n(which I don’t know if it is just me, but I feel guilty doing in a Rails app)\ncreate a Post model, fiddle around trying to serve AJAX content, and generally\nnot have such a free experience.</p>\n<p>_why is one of my all time heroes when it comes to programming. His opinion was that coding\nis much more of an art than a business. Sure its a lot safer to write unit\ntests, and have these standard sub-systems for everything, but what if\nwe just want to express ourselves in our code? What if I don’t care about all\nthe edge cases that could cause my code to blow up, I just want to take\na journey to get someplace?</p>\n<p>Rails seems like ponies and rainbows at first, but then you realize after\na while its all just a business framework like any other. And you know,\nthats fine if I’m writing something for a client. I want that safety and\nstructure. I want that sense of control over my application. But, I feel that\nas programmers, we forget that coding just for the feeling of creating something\nand leaving all of our “business think” back in the office, is a wonderful\nthing.</p>\n<p>I would recommend to everyone to touch a file, <code class=\"language-text\">require 'sinatra'</code> and go wild.\nCreate something, just because you can. And thats awesome.</p>","frontmatter":{"title":"Sinatra vs Rails","date":"May 13, 2011","description":null}},"previous":{"fields":{"slug":"/archive/building-a-blog/"},"frontmatter":{"title":"Building a blog"}},"next":{"fields":{"slug":"/archive/chrome-web-store/"},"frontmatter":{"title":"Chrome web store"}}},"pageContext":{"id":"cc3f657e-b4ed-575e-b2c5-58b929fe60e0","previousPostId":"cad0f470-05a7-5de9-a9c7-735fda7b946a","nextPostId":"225e4a59-0ccc-5b71-953d-1b8dee7ff367"}},
    "staticQueryHashes": ["2841359383","3257411868"]}