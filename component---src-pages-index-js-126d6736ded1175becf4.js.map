{"version":3,"file":"component---src-pages-index-js-126d6736ded1175becf4.js","mappings":"2JAyDA,IA9CY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,uCACa,8BAASb,EAAOa,MAD7B,KAC6Cb,MAAAA,OAAA,EAAAA,EAAQc,UAAW,KADhE,IAGE,qBAAGC,KAAI,yBAAyBZ,MAAAA,OAAA,EAAAA,EAAQa,UAAR,KAAhC,yC,iFCMV,UA/CkB,SAAC,GAAwB,IAAD,EAArBlB,EAAqB,EAArBA,KAAMmB,EAAe,EAAfA,SACnBC,GAAY,UAAApB,EAAKG,KAAKC,oBAAV,eAAwBiB,QAAxB,QACZC,EAAQtB,EAAKuB,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAII,MAAO,CAAEC,UAAU,SACpBJ,EAAMK,KAAI,SAAAC,GACT,IAAMP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BAASzB,UAAU,iBAAiB2B,WAAS,EAACC,SAAS,6BACrD,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYhB,KAG/B,6BAAQO,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,sBAOrB,sBAAIL,IAAI,SAAS1B,UAAU,kBACzB,8BACE,0BACE,gBAAC,EAAA6B,KAAD,CAAMC,GAAG,YAAT,4B","sources":["webpack://ekosz.github.com/./src/components/bio.js","webpack://ekosz.github.com/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author;\n  const social = data.site.siteMetadata?.social;\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Bio;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const posts = data.allMarkdownRemark.nodes;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug;\n\n          return (\n            <li key={post.fields.slug}>\n              <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          );\n        })}\n        <li key=\"achive\" className=\"post-list-item\">\n          <header>\n            <h2>\n              <Link to=\"/archive\">Visit the archive</Link>\n            </h2>\n          </header>\n        </li>\n      </ol>\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/content/blog/\" }\n        fields: { isFuturePost: {eq: false}}\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","location","siteTitle","title","posts","allMarkdownRemark","nodes","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}