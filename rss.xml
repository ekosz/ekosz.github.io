<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog name here RSS Feed]]></title><description><![CDATA[A blog about programming and stuff]]></description><link>https://ekosz.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 03 May 2022 00:10:29 GMT</lastBuildDate><item><title><![CDATA[Leaving Lattice]]></title><description><![CDATA[Today I am stepping away from being a full-time employee of the company
I started, Lattice. Unlike most other founders’ stories or articles…]]></description><link>https://ekosz.github.io/leaving-lattice/</link><guid isPermaLink="false">https://ekosz.github.io/leaving-lattice/</guid><pubDate>Mon, 02 May 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I am stepping away from being a full-time employee of the company
I started, &lt;a href=&quot;https://lattice.com&quot;&gt;Lattice&lt;/a&gt;. Unlike most other founders’ stories or articles
you may have read, this was not due to me being pushed out, or the company
going bankrupt, nor &lt;em&gt;really&lt;/em&gt; about me being burnt out. In fact, Lattice is
doing great, far better than I could have ever dreamed when &lt;a href=&quot;https://twitter.com/jaltma&quot;&gt;Jack&lt;/a&gt;, my
cofounder, and I started the company a little over 6.5 years ago - we have over
4,000 customers, 700,000 users, 600+ of our own employees, and our last
valuation came in around &lt;a href=&quot;https://techcrunch.com/2022/01/19/lattice-raises-175m-more-at-a-3b-valuation-for-its-people-management-platform&quot;&gt;$3B dollars&lt;/a&gt;. For most startup founders,
this would be when things start to get especially interesting, yet I decided
it’s time for me to move on. I’m writing this partially for those interested in
the &lt;strong&gt;why&lt;/strong&gt; and partially for my own closure.&lt;/p&gt;
&lt;h2&gt;Starting a company&lt;/h2&gt;
&lt;p&gt;People start companies for different reasons. Some people get obsessed with an
idea, others do it for the potential wealth they could generate, while others
may be swept into it by a friend or colleague who may be motivated by one of
those first two. I started Lattice because I felt I had something I needed
prove to myself.&lt;/p&gt;
&lt;p&gt;My father is a serial entrepreneur who has by now started half a dozen
businesses. Some of them were very successful; others, spectacular failures.
He’s someone who loves the challenge of building and has an amazing gift for
combining his knowledge across various fields (chemistry, physics,
manufacturing, etc) into business ideas. That all said, growing up I didn’t see
much of my father. He worked all day, came home to join us for dinner, then
holed himself up in his office to continue working for the rest of the evening.&lt;/p&gt;
&lt;p&gt;I discovered pretty early on that the best way to get my father’s attention
would be to ask him about his work. At that point, he would light up and easily
go on for an hour or two about exactly what he was working on, strategies
employed, and so forth. I grew up listening to my father’s corporate escapades,
about taking on far bigger businesses and winning. Stories about creating then
applying trade secrets to transform the markets he operated in.&lt;/p&gt;
&lt;p&gt;Growing up surrounded by these stories, always looking up to my father but also
never feeling like I had his approval or attention, gave me a chip on my
shoulder. If he could do it all, could I? And if I was successful, maybe
I could earn his respect.&lt;/p&gt;
&lt;h2&gt;Growing a business&lt;/h2&gt;
&lt;p&gt;Lattice started much the way typical startups in Silicon Valley do, with
a noticeable problem and a desire to do it better/easier/faster. &lt;a href=&quot;https://twitter.com/jaltma&quot;&gt;Jack&lt;/a&gt;
and I worked together at a rapidly scaling startup called Teespring that, as
more employees joined, seemed to lose sight of the culture and importance of
investing in employees. We asked ourselves, ‘Could we fix Teespring’s issues
with technology?’ and that became the basis for all of Lattice.&lt;/p&gt;
&lt;p&gt;The first year of Lattice was a lot of work, then a lot of existential dread,
and finally, a lot of fun. For the first 7 months, it was &lt;em&gt;just&lt;/em&gt; Jack and I.
Jack would handle all of the business bits while I built the entirety of the
product. We didn’t kill ourselves by any means, but it still meant programming
for 9+ hours a day, 6 days a week. 4 months in we had done a lot of work, but
still had no real validation (customers) and that’s where the existential dread
came from.&lt;/p&gt;
&lt;p&gt;I very vividly remember sitting with Jack outside on the grass asking each
other if we were just wasting our time/lives on this project. Both of us had
other opportunities that would pay well and be a whole lot less work. The
project we poured our time, effort, and passion into for the last 4 months had
not made a drop of difference to anyone. Plus, there wasn’t really any end in
sight. But we ultimately decided that we were going to give it another couple
of months and see what happens. I’m glad we did. As soon as we started getting
our early customers, everything changed.&lt;/p&gt;
&lt;p&gt;There is a night and day difference between having customers and not as
a startup. Suddenly, we had people who cared about Lattice (other than just
Jack and I). And they were paying us! Instead of Jack and I just theorizing
what would be a good idea to build or add to Lattice, we had a group of users
we could just ask. Or, even better, they would tell us exactly what sucked
about our product and we could fix it. It felt great, made us feel like we had
a purpose again, and not just floating in space. Before we knew it there was
more work than Jack and I could handle ourselves and we had to hire others. And
that’s when Lattice really became a lot of fun.&lt;/p&gt;
&lt;p&gt;I love Latticians (&lt;a href=&quot;https://en.wikipedia.org/wiki/Demonym&quot;&gt;demonym&lt;/a&gt; of people who work at Lattice). The
people who resonate with our company mission, “Make work meaningful”, and want
to solve human issues all day are the exact type of people I love being around.
Everyone who joined us was genuinely humble, who just wanted to do right by one
another and our customers, and were motivated to do good work. Some of our
earliest hires also ended up being some of my best friends. The work we did
back then didn’t suddenly get easier, in fact in many ways it got harder once
we had employees, but at least there were now others to problem-solve or
commiserate over the work with. We would have a long day at the office, but
would then be able to go across the street to a bar and unwind. Overcoming
shared struggles felt amazing and made me feel like I had found my community.&lt;/p&gt;
&lt;p&gt;We continued to steadily grow and, by the end of 2019, had gone through
3 offices and had grown to ~125 people. Things were going great, until
something that would change my relationship with Lattice.&lt;/p&gt;
&lt;h2&gt;The pandemic&lt;/h2&gt;
&lt;p&gt;In March of 2020, we were one of the first businesses to go fully remote. And
not by our choice. One day we showed up to the office to find it locked with
a note saying that a member of the building staff team had gotten COVID and the
office was shut down until further notice. That office never opened up again
for us.&lt;/p&gt;
&lt;p&gt;Some people love working from home. It gives them the flexibility they want, it
allows them to see their families more, and it saves them a ton of commuting
time. But as a single guy that truly didn’t have much going on outside of work,
it felt like I was being ripped away from the community that I loved so much.
Zoom was just not the same as being in the office together. And if I didn’t
work directly with someone, there was suddenly no reason for me to ever see or
interact with them. Without the people-side of things all I was really left
with was the work itself.&lt;/p&gt;
&lt;h2&gt;The work&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.ycombinator.com/&quot;&gt;YC&lt;/a&gt;, one of the mantras they drill into founders is that the two tasks
one should prioritize over everything else are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Talking to customers&lt;/li&gt;
&lt;li&gt;Shipping solutions to their problems&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you’re not doing one of those two things you should either not do it or keep
it to a minimum. Thankfully, those are the two things I love doing more than
anything else. I find talking to users of a thing I built awesome and super
energizing. And I also love building things, especially if they make someone’s
life better in some way. This gets even more exciting when they’re then willing
to pay you for that thing you built because it does what they need it to do.&lt;/p&gt;
&lt;p&gt;But as Lattice became bigger and more successful, I found it harder to &lt;em&gt;just&lt;/em&gt;
do those two things. Once you’re a successful, scaling organization, you need
to start focusing on roadmapping, prioritizing, getting cross-functional
alignment, driving technical initiatives, dealing with interpersonal issues,
hiring (oh so much hiring), and more. None of these are unimportant tasks.
Doing these things allow the people doing the &lt;em&gt;real&lt;/em&gt; work, the ICs, to mostly
focus on talking to customers and shipping solutions. As things changed,
I realized these new responsibilities were not the things that drove personal
satisfaction for myself.&lt;/p&gt;
&lt;p&gt;Now you may be starting to say, “Well Eric, aren’t you a cofounder? Can’t you
work on whatever you want? Can’t you &lt;em&gt;just&lt;/em&gt; work on talking to customers and
shipping solutions if that’s what you want to do?“. Truth is, you’re most
likely correct. If I was better at organization crafting maybe I could have
created a situation like that. I know I tried many times to do just that. But
in each situation I eventually (and probably rightfully) kept getting pulled
back out to work on higher-level issues. As cofounder and CTO there are just
a class of problems I cannot turn a blind eye to.&lt;/p&gt;
&lt;p&gt;And so I kept finding myself in these cycles where I was no longer satisfied or
happy with the work I was doing.&lt;/p&gt;
&lt;h2&gt;Practicing what we preach&lt;/h2&gt;
&lt;p&gt;At Lattice, we often talk about “Ikigai”. “Ikigai” is a Japanese word
&lt;a href=&quot;https://ikigaitribe.com/ikigai/podcast07/&quot;&gt;miss-applied to a Spanish astrology concept&lt;/a&gt;. But etymology aside,
what we’re referring to is the concept of having your work be in alignment with
your purpose and be a source of happiness. We’ve strived to create an
environment in Lattice where if an employee no longer feels alignment with
their role that they’re empowered to take action. Maybe that’s as easy as
taking a break, but often it requires a lot more than that. Sometimes it’s
changing projects or teams. Other times it’s trying out a lateral move to
a different position within the same organization. But we also tell our
employees, sometimes it’s Lattice itself which is the source of lack of
satisfaction and that is &lt;em&gt;okay&lt;/em&gt;. It’s okay to no longer be satisfied with the
work you do at the company and to want to seek your next opportunity elsewhere.
That is the natural cycle of employment and something we’re here to support our
employees through that transition.&lt;/p&gt;
&lt;p&gt;But what I didn’t realize when I was speaking about this over the past few
years was that it would one day apply to myself as well.&lt;/p&gt;
&lt;p&gt;While I’m incredibly proud of what Lattice has become and the impact it has on
the world, it’s become time for me to move on to the next part of my journey.&lt;/p&gt;
&lt;h2&gt;What’s next&lt;/h2&gt;
&lt;p&gt;I’m not leaving Lattice completely. I’ll still be on Lattice’s board and will
continue to advise the company, especially when it comes to the larger
strategic initiatives. But, with much reflection, I’ve decided to start a new
company. I’m excited to try this all over again and revisit the excitement of
those early days. However, I’m going to be building something very different
from Lattice. Now that I better understand myself and my motivations, I’ve
decided to create a community-based product, as well as combine a few other of
my passions into one cohesive business.&lt;/p&gt;
&lt;p&gt;If you’re interested in online communities, video platforms, the creator
economy, or &lt;a href=&quot;https://en.wikipedia.org/wiki/VTuber&quot;&gt;VTubers&lt;/a&gt;, and want to join me on this next adventure
please reach out! I can be reached via Twitter DMs or my email is pretty easy
to find online. 😁&lt;/p&gt;
&lt;p&gt;Thanks for taking the time to read this! While it might have been more of
a ramble than I was planning, it did allow me to share a little bit more. Not
only my decision, but the thought process that went into this choice. If you
ever find yourself in a similar position, please reach out to me! I’d be happy
to talk it through with you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br /&gt;
Thank you &lt;a href=&quot;https://twitter.com/jaltma&quot;&gt;Jack&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/alialecam/&quot;&gt;Alia&lt;/a&gt; for proof reading and making this a lot
better than anything I could have written by myself!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Compound vs isolation exercises]]></title><description><![CDATA[If you look at the setup of most commercial gyms today you’ll see row after row
of funny looking machines. Each workout machine works a…]]></description><link>https://ekosz.github.io/archive/compound-vs-isolation-exercises/</link><guid isPermaLink="false">https://ekosz.github.io/archive/compound-vs-isolation-exercises/</guid><pubDate>Tue, 13 Nov 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you look at the setup of most commercial gyms today you’ll see row after row
of funny looking machines. Each workout machine works a different muscle. One
might work your biceps, another your calfs, and another one your lateral
muscles. Most gym goers hop from machine to machine until they feel that they
have worked all their body.&lt;/p&gt;
&lt;p&gt;Maybe in the corner of the gym you’ll see a single hollow metal box with a barbell.
This is called a “power rack” and is avoided my 90% of gym goers. Barbell
exercises are mostly a lost art form as they are thought to be dangerous and
reserved for professional body builders. But this is a fallacy brought to life
by gym owners in the past 35 years. Most gyms don’t want you to do barbell
exercises. It requires their personal trainers to have more training, the
horror, and is considered a legal liability.&lt;/p&gt;
&lt;p&gt;If the workout machines were just as good as doing barbell exercises, this
wouldn’t be a problem. But they are not. The machines provide isolation
exercises while barbell exercises are compound exercises. Working one muscle at
a time has many downfalls. If you are only working a single
muscle, you can’t move much weight. This is a problem because it is hard to
progress in strength. If you are doing 30 pound bicep curls and the machine
increases in 10 pound increments you’re suddenly doing 30% more weight when
you more to the next level. This is near impossible. But if you’re doing 100
pound chest presses with a bar, and increase by 5 pounds your only increasing
your weight by 5% that is distributed across multiple muscle groups. This
allows one to make progress in their weights every time they visit the gym.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Don't bind your dependencies to one another]]></title><description><![CDATA[A few years ago I was assembling my main computer from scratch. Trying to
keep the insides nice and compact, I used zip ties to bind the…]]></description><link>https://ekosz.github.io/archive/dont-bundle-your-dependencies/</link><guid isPermaLink="false">https://ekosz.github.io/archive/dont-bundle-your-dependencies/</guid><pubDate>Mon, 12 Nov 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few years ago I was assembling my main computer from scratch. Trying to
keep the insides nice and compact, I used zip ties to bind the wires together.
After assembling the insides of the computer I started working with my
external accessories. I had a keyboard, mouse, microphone, and webcam.
I figured I would use the same principles as I did inside the computer. Using
some more zip ties I bound all of my accessories wires together. This worked
great up until this week when my new keyboard arrived.&lt;/p&gt;
&lt;p&gt;I unwrapped my new keyboard from its packaging and instantly tried to remove my
old keyboard from my desk. The problem was that every time I tried to remove
the keyboard, the mouse would be dragged off the desk with it. When I tried
getting my mouse more slack, the microphone would fall over.&lt;/p&gt;
&lt;p&gt;I realized that I had to cut the zip ties I had put on years ago, but there was
yet another problem. The ties were bound so tight that I couldn’t get he scissors
around the tie, without being dangerously close to cutting the wires of my
accessories.&lt;/p&gt;
&lt;p&gt;After a couple hours work of using knife from my kitchen I was finally able to
remove my old keyboard without pulling the rest of my equipment off of my desk.
What was supposed to be a relatively easy task, replacing a keyboard, turned
into a nightmare because I couldn’t replace one external dependency without
touching the rest of them.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introduction to juggling]]></title><description><![CDATA[How to learn to jungle in three easy steps. 1. Throwing from hand to hand The first step to juggling is working your hand eye coronation…]]></description><link>https://ekosz.github.io/archive/introduction-to-juggling/</link><guid isPermaLink="false">https://ekosz.github.io/archive/introduction-to-juggling/</guid><pubDate>Fri, 26 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;How to learn to jungle in three easy steps.&lt;/p&gt;
&lt;h3&gt;1. Throwing from hand to hand&lt;/h3&gt;
&lt;p&gt;The first step to juggling is working your hand eye coronation. Start with one
ball, and practice throwing it from your right hand to your left. Try to throw
the ball at the same height every time. The less your have to move your hands
the better.&lt;/p&gt;
&lt;p&gt;Do this until catching the ball is easy and your rarely drop the ball.&lt;/p&gt;
&lt;h3&gt;2. Throwing two balls&lt;/h3&gt;
&lt;p&gt;Its time to graduate to two balls. Many people when the start to jungle try
throwing both balls at the same time. This is wrong and doesn’t help you learn
to juggle. To properly practice with two balls start with one ball in each
hand. Start just like you did before and toss the first ball from your right
hand to your left. A second before the ball reaches your left hand throw the
left ball up in the air. Catch the ball in your left hand and don’t worry
about catching the ball in the air.&lt;/p&gt;
&lt;p&gt;Make sure that the ball you throw in the air goes up and not sideways. Again,
repeat this motion until you aren’t dropping any balls. When your comfortable,
try catching the second ball in the air with your right hand. It may be
difficult at first to get the timing down, but with a short amount of practice
you’ll find your rhythm.&lt;/p&gt;
&lt;h3&gt;3. Juggling&lt;/h3&gt;
&lt;p&gt;Juggling with three balls is the biggest mental hurdle, but believe it or not
by now you have all the skills you need to juggle. Start now with three balls,
two in your right hand and one in your left. Start as you always have throwing
one ball from your right to your left. Again, right before it lands throw your
left ball to your right. Wrapping it all together, you are going to repeat
exactly what you just did, but mirrored. Right before your left ball reaches
your right hand throw the last ball to the left just as you did in the
beginning. Congratulations your juggling.&lt;/p&gt;
&lt;p&gt;Wash, rinse, and repeat these motions trying to juggling more and more times in
a row. From here its pure practice until you can juggle like a pro.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Work better not faster]]></title><description><![CDATA[Deadlines are stressful, difficult to meet, and necessary. Without deadlines
projects could last forever. A little known fact about the TV…]]></description><link>https://ekosz.github.io/archive/work-better-not-faster/</link><guid isPermaLink="false">https://ekosz.github.io/archive/work-better-not-faster/</guid><pubDate>Thu, 25 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Deadlines are stressful, difficult to meet, and necessary. Without deadlines
projects could last forever. A little known fact about the TV South Park is
that its episodes are made every week in only 6 days. One of the creators of
South Park stated that if they didn’t have such a tight deadline every week it
would take the team 2 months to create each episode, while only improving the
quality of them by 2%.&lt;/p&gt;
&lt;p&gt;You would think that with tight deadlines sprinting to the end to meet all of
the requirements is the best strategy, but its not. Sprinting and staying up late
might get the job done, but it will make the job you’ve done be bootsy.&lt;/p&gt;
&lt;p&gt;It is is a false statement that when your behind your work can be done or good,
but not both. If the work you create is not of high quality its not done.
Period.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“No matter who. No matter what. No matter when. Short term.Long term. Any
term. Writing good code is ALWAYS faster than writing bad code.”
-@unclebob on Twitter&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Demoing to the customer]]></title><description><![CDATA[Demo days are important. On these days you are given many opportunities. If the
customer is new, you have a change to really wow them and…]]></description><link>https://ekosz.github.io/archive/demoing-to-the-customer/</link><guid isPermaLink="false">https://ekosz.github.io/archive/demoing-to-the-customer/</guid><pubDate>Wed, 24 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Demo days are important. On these days you are given many opportunities. If the
customer is new, you have a change to really wow them and get the relationship
going on the right foot. If you and the customer have been going through a rough
patch a demo is the perfect time to remind them why they hired you and give
them new-found confidence in your work.&lt;/p&gt;
&lt;p&gt;Demo days are also the worst times for things to go wrong. If someone blows up
in your face in front of the customer their opinion of you and your work will
plummet fast. And it will be your fault. There is no excuse for something
going wrong during the demo. The demo for that day should have been rehearsed
in its entirety multiple times. Demos should also have a code freeze attached
to them. You don’t want some “bug fix” that morning to screw up what you have
practiced demoing the night before.&lt;/p&gt;
&lt;p&gt;Demos are the glue that bind you to your customer. If you demo often and well
the customer will build their trust in you and keep brining you their business.
If you don’t demo often, or worse, have a bad demo they will begin to worry and
start to think about how other developers might be a safer option.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test often, for the sake of your brain]]></title><description><![CDATA[I run my tests as often as I can. Even when I’ve only edited a couple lines of
code, I run my tests. To me, tests are a way of saving my…]]></description><link>https://ekosz.github.io/archive/test-often-for-the-sake-of-your-brain/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-often-for-the-sake-of-your-brain/</guid><pubDate>Tue, 23 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I run my tests as often as I can. Even when I’ve only edited a couple lines of
code, I run my tests. To me, tests are a way of saving my precious brain
cycles and time. Looking at different piece of code requires me to load up that
code’s mind state which takes a non-zero amount of time.&lt;/p&gt;
&lt;p&gt;My current process looks like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;load up a piece of code (x time)&lt;/li&gt;
&lt;li&gt;make changes (y time)&lt;/li&gt;
&lt;li&gt;run tests (z time)
if tests pass, dump memory and move on
else go back to 2&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this process x is constant and y and z have scalers.&lt;/p&gt;
&lt;p&gt;If I didn’t run my tests often my process would look more like&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;load up a piece of code (x time)&lt;/li&gt;
&lt;li&gt;make changes (y time)&lt;/li&gt;
&lt;li&gt;load up a new piece of code (x time)&lt;/li&gt;
&lt;li&gt;make changes (y time)&lt;/li&gt;
&lt;li&gt;run tests(z time)
if tests pass, dump memory move on
else if tests break on code 1, go to 1
else go to 4&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this process x, y, and z all of scalers.&lt;/p&gt;
&lt;p&gt;The problem here is that bugs bubble up. If I’m working on multiple pieces of
code, I’ll have to keep keep dumping and loading new states of mind. The time
it takes to switch states builds up and soon half your day is spent trying to
remember what you were doing the other half.&lt;/p&gt;
&lt;p&gt;This is also the reason distraction can be so distributive to work. When
a developer gets distracted they automatically dump their memory so they can
interpret the distraction. Then afterwords they need to spend x time to load
up the code again.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Slow tests kill the developer]]></title><description><![CDATA[Problems of slow test: If running your tests takes a non-trivial amount of time, you’ll be more reluctant
to run them. If tests start to…]]></description><link>https://ekosz.github.io/archive/slow-tests-kill-the-developer/</link><guid isPermaLink="false">https://ekosz.github.io/archive/slow-tests-kill-the-developer/</guid><pubDate>Mon, 22 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Problems of slow test:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If running your tests takes a non-trivial amount of time, you’ll be more reluctant
to run them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If tests start to become a chore, then we’d be more willing to move on to new
tasks without first finding out if there are bugs in what we just did.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If tests run in lengths of minutes. While we watch the test suite we are slowly
forgetting what were just working on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long tests cause stress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stress leads to anger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anger leads to hate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hate leads to suffering.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Wear your rain coat]]></title><description><![CDATA[Applications normally have third party dependencies you don’t control. These
dependencies can show up as HTTP calls to foreign servers…]]></description><link>https://ekosz.github.io/archive/wear-your-rain-coat/</link><guid isPermaLink="false">https://ekosz.github.io/archive/wear-your-rain-coat/</guid><pubDate>Fri, 19 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Applications normally have third party dependencies you don’t control. These
dependencies can show up as HTTP calls to foreign servers, third party libraries
(gems, jars, etc), or in a particularly large project maybe even calling into
a service written by another team.&lt;/p&gt;
&lt;p&gt;Every time we use one of these third parties our own code becomes more tightly
coupled to the third party’s interface. What happens when we decide to update
our dependency and the interface has changed? We have to go throughout our
entire application and change how we interact with that dependency at every
location.&lt;/p&gt;
&lt;p&gt;We can protect ourselves from this scenario using a rain-coat. A rain-coat
class wraps our dependencies. At first it can act as a simple delegator,
keeping the same interface and transparently call through to the dependency.&lt;br&gt;
But, when the dependency’s interface changes, it switches to be an adapter. Our
rain-coat keeps the same interface, but modifies itself to keep working with
the new interface of the dependency. And the rest of our application code is
none the wiser.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Looking the part]]></title><description><![CDATA[A consultancy is a service oriented business. As consultants its our job to
make our clients happy, but more impotently make their…]]></description><link>https://ekosz.github.io/archive/looking-the-part/</link><guid isPermaLink="false">https://ekosz.github.io/archive/looking-the-part/</guid><pubDate>Wed, 17 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A consultancy is a service oriented business. As consultants its our job to
make our clients happy, but more impotently make their businesses better for
hiring us. For clients to hire consultants and give them access to their code
requires trust. They are passing off their baby and golden goose to us. If they
don’t trust who they have hired, they’ll get spooked and take their business
elsewhere.&lt;/p&gt;
&lt;p&gt;Thats why even if you’re the most competent programmer in the world and you
have brought back dozens of projects back from the brink of death, if you don’t
look and act the part none of that matters. The problem is that clients can’t
see into your head. They don’t see the knowledge that is there or the skill you
wield. They see you, how you dress, how you talk, and how you carry yourself.&lt;/p&gt;
&lt;p&gt;If you don’t look and act the part you will leave a bad impression, no matter
what. Egos serve no purpose when dealing with clients.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Writing a super simple lisp interpreter]]></title><description><![CDATA[It seems that its every programmers right of passage to write their own lisp
interpreter. What most beginner programmers don’t realize is…]]></description><link>https://ekosz.github.io/archive/writing-a-super-simple-lisp-interpreter/</link><guid isPermaLink="false">https://ekosz.github.io/archive/writing-a-super-simple-lisp-interpreter/</guid><pubDate>Tue, 16 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It seems that its every programmers right of passage to write their own lisp
interpreter. What most beginner programmers don’t realize is just how easy this
feet can be. Here I’ll demonstrate how to create one of these interpreters in
less than 100 LOC.&lt;/p&gt;
&lt;h3&gt;The lexer&lt;/h3&gt;
&lt;p&gt;First part of any interpreter is the lexer. The lexers job to is to read
a string and turn it into a stream of tokens for the next part of the
interpreter. This can be done in a simple Regex statement.&lt;/p&gt;
&lt;p&gt;Lets first write some tests to make sure that our lexer is working.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;assert&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  fail &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;expected &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inspect&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, got &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inspect&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unless&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; b
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lex&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lex&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1 abc&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;%w[ ( 1 abc ) ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lex&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(1 abc)&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;%w[ (= 2 ( + 1  1 ) ) ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lex&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(= 2 (+ 1 1))&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alright this should handle all of the use cases of our lexer. Now lets get
some of these tests passing.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;lex&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scan&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex-literal&quot;&gt;&lt;span class=&quot;token regex&quot;&gt;/\w+|[\(\)\+=]/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats all we need to get our tests passing. These regex tokenizes our string
using words, parentheses, plus signs and equal signs.&lt;/p&gt;
&lt;p&gt;Now that the lexer is written we can write our parser. The parser takes in the
token from our lexer, and turns them into s-expressions that our interpretor
can use. Lets write some tests for our parser.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:abc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(1)&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(= 2 (+ 1 1))&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want our parser to treat our numbers as numbers and everything else as
symbols. We also want it to create arrays as the s-expression forms.
Implementing this it a bit more complicated but still reasonable.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Parser&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tokens&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@tokens&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tokens
    &lt;span class=&quot;token variable&quot;&gt;@pos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;/span&gt;
    t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; next_token

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;/span&gt;
      array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; parse&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        array &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; parsed
      &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;token builtin&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;rescue&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to_sym
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;next_token&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@tokens&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;@pos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tap &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@pos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lex&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parse
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parser iterates over the tokens. When it finds a open parenthesis, it
starts up a array and starts shovelling parsed tokens into it until it finds
a closing parenthesis. Otherwise it tries to convert the token into an
Integer. Failing that it turns the token into a symbol.&lt;/p&gt;
&lt;p&gt;Now that our string has been lexed, then parsed into s-expressions we can
finally interpret the results. Interpreters can get as complicated as you
want, but for our purposes we’re only going to support adding and comparing.
Again we’re going to start with our tests.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lisp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lisp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(+ 1 1)&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lisp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(= 2 (+ 1 1))&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
assert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lisp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(= 3 (+ 1 1))&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for the interpreter itself.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Interpreter&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expressions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@expressions&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; expressions
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;interpret&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@expressions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; expression&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;is_a&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;
      command &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; expression&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;first
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;token keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
               interpret&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; interpret&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;token keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
               interpret&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; interpret&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
               &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unknown command: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to_s&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
             &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

     expression
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;lisp&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;Interpreter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;interpret
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This interpreter has no idea of variables or state, but it works for our
purposes. From here we’d implement tracking the current environment and
removing the hard coded functions.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test driven Clojure part VI]]></title><description><![CDATA[Now we have a text displayed on our site, but its not very pretty. To add some semantic
markup we’re going to have to use HTML. We’ll be…]]></description><link>https://ekosz.github.io/archive/test-driven-clojure-part-six/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-driven-clojure-part-six/</guid><pubDate>Mon, 15 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Now we have a text displayed on our site, but its not very pretty. To add some semantic
markup we’re going to have to use HTML. We’ll be writing HTML in pure Clojure
code using a library called Hiccup.&lt;/p&gt;
&lt;h3&gt;Introduction to Hiccup&lt;/h3&gt;
&lt;p&gt;Lets first create a layout file for our entire site. This layout will be used
on every page. Lets add it in a util folder.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; src/util/layout.hiccup&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:html&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:head&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Kachie - The Backpage of the Web!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:body&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:template-body&lt;/span&gt; joodo.views/*view-context*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing you’ll notice about the code above, is that its pure Clojure.
Unlike other HTML generating markup languages, Hiccup doesn’t use any fancy
DSLs (Domain Specific Languages). Every tag is represented by a vector, where
the first element in the tag is a keyword that acts as the name of the name.
Embedded tags are just embedded vectors. If we want to give our tag a value,
like the title tag, we pass it as a string.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;eval&lt;/code&gt; line will insert the HTML that is specific to a certain page.&lt;/p&gt;
&lt;p&gt;Lets try using this layout file in our homepage route.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with-mock-rendering&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:strict&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:template-root&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;katchie&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;displays a homepage with HTML&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;do-get&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;home&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;rendered-template&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After using the helper method &lt;code class=&quot;language-text&quot;&gt;with-mock-rendering&lt;/code&gt; Joodo provides us with the
reference &lt;code class=&quot;language-text&quot;&gt;@rendered-template&lt;/code&gt; after we make a request to our application. This
test should fail, telling us that @rendered-template is nil. Lets fix that.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo.views &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;render-template&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; app-handler &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:status&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:headers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render-template&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;home&quot;&lt;/span&gt;
                          &lt;span class=&quot;token symbol&quot;&gt;:layout&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;util/layout&quot;&lt;/span&gt;
                          &lt;span class=&quot;token symbol&quot;&gt;:template-root&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;katchie&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets use a new Joodo helper method, &lt;code class=&quot;language-text&quot;&gt;render-template&lt;/code&gt;. Instead of us creating
the response hash from scratch, &lt;code class=&quot;language-text&quot;&gt;render-template&lt;/code&gt; will do that work for us.
The first argument is the template to load, and then many optional arguments.
The first of which is &lt;code class=&quot;language-text&quot;&gt;:layout&lt;/code&gt; and it points the layout file we want to
use. Another optional argument is &lt;code class=&quot;language-text&quot;&gt;:template-root&lt;/code&gt;, which is where the root of
our template is located. By default Joodo looks is src/views for the layout
file, but we’re not going to architect our application like that.&lt;/p&gt;
&lt;p&gt;Running the test now gives us a new error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Template Not Found: katchie/home.hiccup[.clj]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need the create the template file its looking for. Lets create a short
introduction to our app.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; src/katchie/home.hiccup&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;headline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:h1&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Kachie&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:h2&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Where dreams DO come true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll notice I used a new technique in the hiccup file. If you’ve done any HTML
development in the past, you know that HTML tags can have many arguments.
Arguments in Hiccup are passed as a hash-map as the second option of a tag
vector.&lt;/p&gt;
&lt;p&gt;Now we have passing tests. Booting up the server with &lt;code class=&quot;language-text&quot;&gt;lein joodo server&lt;/code&gt; and
viewing our application in our browser you should see…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Kachie

Where dreams DO come true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Test driven clojure part V]]></title><description><![CDATA[We now have passing tests, but our website isn’t very functional. Lets add
a home page for our (soon to be) millions of visitors. Writing…]]></description><link>https://ekosz.github.io/archive/test-driven-clojure-part-five/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-driven-clojure-part-five/</guid><pubDate>Thu, 11 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We now have passing tests, but our website isn’t very functional. Lets add
a home page for our (soon to be) millions of visitors.&lt;/p&gt;
&lt;h3&gt;Writing our first Joodo-based test&lt;/h3&gt;
&lt;p&gt;Lets write a test that makes sure that we get a 200 response back from the
server when we acsess the root path.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;displays a homepage&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;response &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;do-get&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:status&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;do-get&lt;/code&gt; is a method given to us by the joodo.spec-helper.controller namespace.
It sends an imaginary post to the path, and seconds the result. The result is
a hash-map of &lt;code class=&quot;language-text&quot;&gt;{:status ..., :headers ..., :body ...}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Running this test, we get our next error. Yay!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.F

Failures:

  1) Katchie displays a homepage
     Attempting to call unbound fn: #&apos;joodo.spec-helpers.controller/*routes*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What does this mean? Its our most un-helpful message yet. The problem is that
the &lt;code class=&quot;language-text&quot;&gt;do-get&lt;/code&gt; method doesn’t know what Joodo controller to test. The joodo
spec-helpers gives us a message that will point our tests to the right
location.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with-routes&lt;/span&gt; app-handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding that line to our tests will tell Joodo to use the app-handler.
Unfortunately we haven’t built a app handler yet and we get another error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;java.lang.RuntimeException: Unable to resolve symbol: app-handler in this context&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets create that handler in our core.clj file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; app-handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running again we get another error. Remember whenever the message we get back
changes, we’re making progress.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Attempting to call unbound fn: #&apos;katchie.core/app-handler&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks like app-hander is meant to be a function. Lets change the definition of
app-hander to reflect that.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; app-handler &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lein spec&lt;/code&gt; gives us our next error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Wrong number of args (1) passed to: core$app-handler&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great! Now we know that our app-handler has to take an argument. We don’t
know what that argument is yet, but we’re slowly learning about Joodo and how
it works. Lets rewrite our app-hander method to take that argument then print
it out to the console.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; app-handler &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;println&lt;/span&gt; thing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ lein spec
.{:request-method :get, :uri /}
F

Failures:

  1) Katchie displays a homepage
     Expected: &amp;lt;200&gt;
          got: nil (using =)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve now discovered the last two pieces of information we need to realize
how Joodo works. The first is obvious, the argument we receive is the request
hash-map. Is has a :request-method key and a :uri key. The second piece of
information we’ve gathered is more hidden. Joodo expects this method to return
a response hash. The test is currently calling (:status nil) which returns
nil.&lt;/p&gt;
&lt;p&gt;One more rewrite of our core.clj file is all we need to get this test to pass.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; app-handler &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:status&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:headers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:body&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;..

Finished in 0.00065 seconds
2 examples, 0 failures&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect we’ve gotten our test to pass and written just enough code to have
a fully working Joodo application. We can test it out by running &lt;code class=&quot;language-text&quot;&gt;lein joodo server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that command you can direct your browser to localhost:8080 and see the
fruit of your labor.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP ERROR 500

Problem accessing /. Reason:

    java.lang.RuntimeException: java.io.FileNotFoundException: config/environment.clj (No such file or directory)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well thats not good. Looks like Joodo was expecting a config/environment.clj
file to exist. Lets create that quickly.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; config/environment.clj&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;alter-env!&lt;/span&gt; assoc
  &lt;span class=&quot;token symbol&quot;&gt;:joodo.root.namespace&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;katchie.core&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells Joodo that its root name space is that core file we just created.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP ERROR 500

Problem accessing /. Reason:

    java.lang.RuntimeException: java.io.FileNotFoundException: config/development.clj (No such file or directory)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well another file missing. Lets create that too.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;alter-env!&lt;/span&gt; assoc
  &lt;span class=&quot;token symbol&quot;&gt;:joodo-env&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;development&quot;&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:hostname&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file sets some global configuration for our development environment. One
last time into the breach. Lets start our server and see what we get.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Hello world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You did it! Congratulations on creating your first Joodo application.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test driven Clojure part IV]]></title><description><![CDATA[In a series about tests we haven’t been writing many of them. Lets change
that. Writing the first test Lets first start and build up our…]]></description><link>https://ekosz.github.io/archive/test-driven-clojure-part-four/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-driven-clojure-part-four/</guid><pubDate>Wed, 10 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In a series about tests we haven’t been writing many of them. Lets change
that.&lt;/p&gt;
&lt;h3&gt;Writing the first test&lt;/h3&gt;
&lt;p&gt;Lets first start and build up our directory structure. And write a simple test.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; -p src/katchie
$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; -p spec/katchie&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; spec/katchie/core_spec.clj&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core-spec
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;speclj.core&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo.spec-helpers.controller&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;katchie.core&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Katchie&quot;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;runs&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run-specs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code class=&quot;language-text&quot;&gt;lein spec&lt;/code&gt; we should get the error&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;java.io.FileNotFoundException: Could not locate katchie/core__init.class or katchie/core.clj on classpath&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is good. Though a bit cryptic, it is telling us that it couldn’t find the file
katchie/core.clj file. Lets create it and see if that gets rid of the error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; src/katchie/core.clj
$ lein spec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Success! We have a new error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;java.lang.Exception: namespace &apos;katchie.core&apos; not found after loading &apos;/katchie/core&apos;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks like we need to edit the file to include the katchie.core namespace.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; src/katchie/core.clj&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; katchie.core&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code class=&quot;language-text&quot;&gt;lein spec&lt;/code&gt; another time and we have a passing spec!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.

Finished in 0.00071 seconds
1 examples, 0 failures&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ve successfully written a test for you application! Congratulations.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test driven Clojure part III]]></title><description><![CDATA[Now that we have Leiningen installed we can start installing the rest of our
Clojure toolkit and writing some code. Creating the project.clj…]]></description><link>https://ekosz.github.io/archive/test-driven-clojure-part-three/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-driven-clojure-part-three/</guid><pubDate>Wed, 03 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Now that we have Leiningen installed we can start installing the rest of our
Clojure toolkit and writing some code.&lt;/p&gt;
&lt;h3&gt;Creating the project.clj&lt;/h3&gt;
&lt;p&gt;We’ve come to our first major hurdle, what are we going to name this
application? It needs to be catchy, easy to remember, and have great SEO
potential. Lets go with “Katchie”! I can already start to see the money
flowing in.&lt;/p&gt;
&lt;p&gt;In your normal coding directory, lets create a folder where all of our code is
going to live.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; ~/Code
$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; katchie
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; katchie&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following proper coding habits we’re going to create a project.clj. The
project.clj stores the meta-information about a Clojure application. Here is
where we’ll list our external dependencies and configure our setup.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defproject&lt;/span&gt; katchie &lt;span class=&quot;token string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:description&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A socail news aggregator&quot;&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;org.clojure/clojure &lt;span class=&quot;token string&quot;&gt;&quot;1.4.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo &lt;span class=&quot;token string&quot;&gt;&quot;0.11.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion &lt;span class=&quot;token string&quot;&gt;&quot;3.3.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:profiles&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:dev&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;speclj &lt;span class=&quot;token string&quot;&gt;&quot;2.3.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:plugins&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;speclj &lt;span class=&quot;token string&quot;&gt;&quot;2.3.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo/lein-joodo &lt;span class=&quot;token string&quot;&gt;&quot;0.11.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:test-paths&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;spec/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:java-source-paths&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This might look complceted at first but lets break it down line by line.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defproject&lt;/span&gt; katchie &lt;span class=&quot;token string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the top level of our project.clj we call this special method defproject.
The first argument is what we want to call the namespace of the project, and
the second is a string representation of the version. We’re going to use
“0.0.1” for now, until we add some features. But the end of this series we
should be at our “1.0.0” release.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token symbol&quot;&gt;:description&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A social news aggregator&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not very important to us, but if we were creating a tool for other
developers to use, this would be the description they would see in leiningen
next to the name of our project.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token symbol&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;org.clojure/clojure &lt;span class=&quot;token string&quot;&gt;&quot;1.4.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
               &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo &lt;span class=&quot;token string&quot;&gt;&quot;0.11.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
               &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion &lt;span class=&quot;token string&quot;&gt;&quot;3.3.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the current dependencies of our project. We’ll be using Clojure
version “1.4.0”, Joodo “0.11.0”, and Hyperion “3.3.0”. These might not be the
current versions of these projects, but thats what we’ll use during the
development of this project. After completing this series I’ll leave it as
a task to you to update these libraries to their most recent versions then
update the project to work the updated APIs.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token symbol&quot;&gt;:profiles&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:dev&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;speclj &lt;span class=&quot;token string&quot;&gt;&quot;2.3.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have another dependency, and that our testing framework Speclj. We treat
Speclj differently, because its a development dependency. We won’t need Speclj
on our production server.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token symbol&quot;&gt;:plugins&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;speclj &lt;span class=&quot;token string&quot;&gt;&quot;2.3.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo/lein-joodo &lt;span class=&quot;token string&quot;&gt;&quot;0.11.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These lines add the Speclj and Joodo plugins to the Leiningen. Command line
interface. We’ll be using their commands later in the series.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token symbol&quot;&gt;:test-paths&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;spec/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token symbol&quot;&gt;:java-source-paths&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These last lines help point our dependencies to the right locations.&lt;/p&gt;
&lt;p&gt;That’s it for now. Running &lt;code class=&quot;language-text&quot;&gt;lein deps&lt;/code&gt; should spew out a bunch of output as it
installs our dependencies. If this is the first time your installing Clojure,
this might take a while.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test driven Clojure part II]]></title><description><![CDATA[In my last post we talked about the tools we’re going to use for this project.
Now we’re going to get set up with these tools so we can get…]]></description><link>https://ekosz.github.io/archive/test-driven-clojure-part-two/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-driven-clojure-part-two/</guid><pubDate>Tue, 02 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my last post we talked about the tools we’re going to use for this project.
Now we’re going to get set up with these tools so we can get coding next.&lt;/p&gt;
&lt;h3&gt;Installing Leiningen&lt;/h3&gt;
&lt;p&gt;The first thing we’ll need is Leiningen, as it will be the tool to download the
rest of our dependencies.&lt;/p&gt;
&lt;p&gt;If you’re worried about control of your system you can go to Leiningen’s
&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;Github Page&lt;/a&gt; and get detailed
instructions on installation. For everyone else, running the following command
should get you setup.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; ~/bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; ~/bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://raw.github.com/technomancy/leiningen/preview/bin/lein &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;755&lt;/span&gt; lein&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to add our newly created ~/bin directory to our load path.
I normally add this to my .profile file in my home directory. If you use
a shell that doesn’t use the .profile library, you probably know where this
should go instead. If you don’t know if your shell uses .profile, then it
probably does.&lt;/p&gt;
&lt;p&gt;Either add the following to your existing .profile file, or create it in your
home directory.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Add user bin files&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/Users/ekoslow/bin:&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything went well, after opening up a new console you should be able to
do something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ lein -v
Leiningen &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;.0-preview7 on Java &lt;span class=&quot;token number&quot;&gt;1.6&lt;/span&gt;.0_33 Java HotSpot&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;-Bit Server VM&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Test driven Clojure part I]]></title><description><![CDATA[Welcome to my new series Test Driven Clojure. In these series of blog posts
we’ll use a collection of open source tools and best testing…]]></description><link>https://ekosz.github.io/archive/test-driven-clojure-part-one/</link><guid isPermaLink="false">https://ekosz.github.io/archive/test-driven-clojure-part-one/</guid><pubDate>Mon, 01 Oct 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Welcome to my new series Test Driven Clojure. In these series of blog posts
we’ll use a collection of open source tools and best testing practices to
create a social news aggregation site from scratch.&lt;/p&gt;
&lt;h3&gt;Tools&lt;/h3&gt;
&lt;p&gt;The tools we’ll be using for this project are all free and open source. After
completing this series feel free to go back and swap out some of these tools
for others that do the same job.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;Leiningen&lt;/a&gt;: At the time of this
writing Leiningen has become the de facto tool for managing dependencies in
Clojure. After an initial setup, Leiningen makes easy work of downloading
external libraries and installing them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/slagyr/joodo&quot;&gt;Joodo&lt;/a&gt;: Joodo is a lightweight web framework built
off of another popular Clojure project Ring. Joodo uses Ring’s Router and
provides us an simple API for creating complex web applications. Joodo will
handle all of the HTTP communication for us, letting us focus on the behavior of
our application.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/8thlight/hyperion&quot;&gt;Hyperion&lt;/a&gt;: Our application will
eventually need to store data between requests, or it wouldn’t make for a very
good website. So how are we going to save our data? A SQL database? A NoSQL DB?
There are too many choices of datastores in the wild currently. As responsible
engineers, we’re not going to make such an important choice about our
application until we know more about our requirements. Hyperion lets us stay
agile and flexible our development process. Hyperion provides a single API
that can then be hooked into many concrete databases later. Using Hyperion we
can nearly wait until the project is completed before we’re forced to pick
a data saving scheme.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt;: Recently there has been
a trend in web applications to move to fat javascript heavy web apps. Views
are rendered client side and simple JSON data is piped in from the server.
That is NOT what we’re going to be doing. We will be rendering our views
server side in Hiccup. Hiccup follows the Clojure idiom of using data as code
and provides a clean way of generating HTML.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/slagyr/speclj&quot;&gt;Speclj&lt;/a&gt;: This wouldn’t be a very good series
on testing if we didn’t have a tool for writing good tests. Speclj provides
Clojure developers with a Rspec-esk API for writing BDD style tests.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Handling errors in Java]]></title><description><![CDATA[There are two ways to handle errors in Java; you can handle the error yourself,
or make someone else deal with it. The general rule of thumb…]]></description><link>https://ekosz.github.io/archive/handling-errors-in-java/</link><guid isPermaLink="false">https://ekosz.github.io/archive/handling-errors-in-java/</guid><pubDate>Wed, 19 Sep 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are two ways to handle errors in Java; you can handle the error yourself,
or make someone else deal with it. The general rule of thumb to follow seems
to be make someone else deal with it, unless you can’t.&lt;/p&gt;
&lt;h3&gt;Making someone else deal&lt;/h3&gt;
&lt;p&gt;Lets say we have a method that reads from a file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useDelimiter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\\Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When trying to compile this piece of code we’ll be told that we need the
handle the &lt;code class=&quot;language-text&quot;&gt;FileNotFoundException&lt;/code&gt;. We go back to our rule of thumb and
realize that there is nothing stopping us from making someone else deal with the
error.&lt;/p&gt;
&lt;p&gt;To make the compile error go away all we have to add is a throws declaration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useDelimiter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\\Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Dealing with it ourselves&lt;/h3&gt;
&lt;p&gt;Now lets say we’re writing a Thread class. If any error happens here we have
no one the pass the blame to. We’re at the top, and need to deal with the
errors coming at us or we’re going to die as a thread.&lt;/p&gt;
&lt;p&gt;This is where try-catch blocks come into play. These catch errors and let us
deal with them.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; request &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;serverResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Something went wrong reading/writing to IO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Could not close the IO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Faking OO in Clojure]]></title><description><![CDATA[When programming in a functional language, the often comes a time when we must
couple data to functions like in an Object Oriented language…]]></description><link>https://ekosz.github.io/archive/faking-OO-in-clojure/</link><guid isPermaLink="false">https://ekosz.github.io/archive/faking-OO-in-clojure/</guid><pubDate>Thu, 13 Sep 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When programming in a functional language, the often comes a time when we must
couple data to functions like in an Object Oriented language. I mostly see
this happen in terms of databases and relations.&lt;/p&gt;
&lt;p&gt;In my hypothetical application I have users that have many documents. Here’s
what their &lt;a href=&quot;https://github.com/8thlight/hyperion&quot;&gt;Hyperion&lt;/a&gt; protocols might look like.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.user.user
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.api &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defentity&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defentity&lt;/span&gt; User
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.document.document
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.api &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defentity&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defentity&lt;/span&gt; Document
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;user-key &lt;span class=&quot;token symbol&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if we wanted to add a method for users to get their corresponding
documents? Follow certain conventions we can create a method that looks very OO.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.user.user
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.api &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;defentity find-by-kind&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;defentity&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; documents &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;this&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find-by-kind&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:filters&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:user-key&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:key&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; as the name of the argument we are but into the mindset of
manipulating User hashes. Every function defined inside this namespace should
take a user hash as the first argument.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Flash messages in Joodo]]></title><description><![CDATA[Joodo has built in support for Rails-like flash messages. These are great for persisting one-time messages between requests. First off we…]]></description><link>https://ekosz.github.io/archive/flash-messages-in-joodo/</link><guid isPermaLink="false">https://ekosz.github.io/archive/flash-messages-in-joodo/</guid><pubDate>Tue, 11 Sep 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;http://www.joodoweb.com/&quot;&gt;Joodo&lt;/a&gt; has built in support for Rails-like flash messages.&lt;br&gt;
These are great for persisting one-time messages between requests.&lt;/p&gt;
&lt;p&gt;First off we need to set the message in the controller.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn-&lt;/span&gt; create-user &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;params &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:params&lt;/span&gt; *request*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;hash-map&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:kind&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;assoc&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;redirect-after-post&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token symbol&quot;&gt;:flash&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:messages&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;User Created!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can grab this flash message from our view.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if-let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;flash &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:flash&lt;/span&gt; *request*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;flash&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if-let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;messages &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:messages&lt;/span&gt; flash&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; %&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; messages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Writing Joodo middleware]]></title><description><![CDATA[While working on a Joodo project, I came across the issue of authentication.
On a controller by controller basis, we had to redirect users…]]></description><link>https://ekosz.github.io/archive/writting-joodo-middleware/</link><guid isPermaLink="false">https://ekosz.github.io/archive/writting-joodo-middleware/</guid><pubDate>Tue, 04 Sep 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;While working on a &lt;a href=&quot;http://www.joodoweb.com/&quot;&gt;Joodo&lt;/a&gt; project, I came across the issue of authentication.
On a controller by controller basis, we had to redirect users away if they
weren’t authenticated.&lt;/p&gt;
&lt;p&gt;In Rails the standard way to handle this use case, is to use a before filter,
where the method is defined in the application controller. Joodo doesn’t have
before filters, but what it does have is middleware.&lt;/p&gt;
&lt;p&gt;Joodo middleware takes a handler and returns a function that takes a request
and does something with it. It can modify the request and pass it on to the
next handler, or completely blow the stack and never call the next handler.&lt;/p&gt;
&lt;p&gt;Heres the code I ended up writing as a authentication middleware.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.middleware.authentication
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ring.util.response &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;redirect&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;sample.athentication &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;is-valid-user&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; with-valid-user &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is-valid-user&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;; pass on request to next middleware&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/authentication&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can use this middleware in my controllers.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.user.user-controller
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;compojure.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:all&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;sample.middleware.authentication &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;with-valid-user&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defroutes&lt;/span&gt; user-controller
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with-valid-user&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/user&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create-user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/new&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new-user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Command patten extraction]]></title><description><![CDATA[In my first iteration of my Limelight interface to mu TTT program I ended up
putting all of my application logic inside my player classes…]]></description><link>https://ekosz.github.io/archive/command-pattern-extraction/</link><guid isPermaLink="false">https://ekosz.github.io/archive/command-pattern-extraction/</guid><pubDate>Wed, 29 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my first iteration of my &lt;a href=&quot;http://limelight.8thlight.com/&quot;&gt;Limelight&lt;/a&gt; interface to mu TTT program I ended up
putting all of my application logic inside my player classes. Players in
limelight act as controllers to the GUI.&lt;/p&gt;
&lt;p&gt;Controllers only have one job. Controllers are translators to the GUI. They first
translate events in the GUI into data the application domain can understand.
Then they translate the result from the domain logic into simple data the GUI
can understand.&lt;/p&gt;
&lt;p&gt;Domain logic does not belong in the controller. If it is found there, then it
needs to be extracted. One method of extraction is to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Command_pattern&quot;&gt;command pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is one of the easiest extraction patterns.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a class who’s name is the action we’re extracting.&lt;/li&gt;
&lt;li&gt;Create an execute method inside this class.&lt;/li&gt;
&lt;li&gt;Copy paste the logic we’re extracting from the controller into the execute method.&lt;/li&gt;
&lt;li&gt;Scan through the copied code and turn local variables into instance variables.&lt;/li&gt;
&lt;li&gt;Create a constructor for the class that takes each variable, and sets that instance variable.&lt;/li&gt;
&lt;li&gt;Replace the section of code in the controller with this class.&lt;/li&gt;
&lt;li&gt;Run tests and make sure the code still works.&lt;/li&gt;
&lt;li&gt;Refactor.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Saving parentheses using comp]]></title><description><![CDATA[When I started programming in Clojure I was immediately turned off my all of the
parentheses that littered the source code. Over time you…]]></description><link>https://ekosz.github.io/archive/saving-parentheses-using-comp/</link><guid isPermaLink="false">https://ekosz.github.io/archive/saving-parentheses-using-comp/</guid><pubDate>Tue, 28 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When I started programming in Clojure I was immediately turned off my all of the
parentheses that littered the source code. Over time you get used to them, but
its still always nice when you can reduce the amount that you have to use.&lt;/p&gt;
&lt;p&gt;Thats why &lt;code class=&quot;language-text&quot;&gt;comp&lt;/code&gt; is such an awesome tool in any function language. &lt;code class=&quot;language-text&quot;&gt;comp&lt;/code&gt; takes
a series of functions and combines them into one big function. Its easier to
see than it is to explain.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;; The old way&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:fields&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find-by-type&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;; The new hotness with comp&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; last &lt;span class=&quot;token symbol&quot;&gt;:fields&lt;/span&gt; first find-by-type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each function passed to &lt;code class=&quot;language-text&quot;&gt;comp&lt;/code&gt; will be called in sequence. This saves on
parentheses and complexity.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introduction to Hyperion]]></title><description><![CDATA[Hyperion is a common datastore API for
Clojure. It wraps various databases in a common API and lets developers hold
off the choosing of a DB…]]></description><link>https://ekosz.github.io/archive/intro-to-hyperion/</link><guid isPermaLink="false">https://ekosz.github.io/archive/intro-to-hyperion/</guid><pubDate>Mon, 27 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.com/8thlight/hyperion&quot;&gt;Hyperion&lt;/a&gt; is a common datastore API for
Clojure. It wraps various databases in a common API and lets developers hold
off the choosing of a DB.&lt;/p&gt;
&lt;p&gt;First off add Hyperion to your project.clj file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defproject&lt;/span&gt; sample &lt;span class=&quot;token string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;
  &lt;span class=&quot;token symbol&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion/core &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we can write a spec to test out the functionality of Hyperion. We’ll be
using &lt;a href=&quot;http://speclj.com/&quot;&gt;Speclj&lt;/a&gt; for the specs.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.core-spec
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;speclj.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;sample.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.memory &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;new-memory-datastore&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hyperion&quot;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;can store a value&quot;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:kind&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Eric&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Eric&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; first find-by-kind&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what the Hyperion API looks like. The &lt;code class=&quot;language-text&quot;&gt;save&lt;/code&gt; function takes a hash-map
or record, and saves it to the datastore. Each hash-map should have a type,
this will be the collection the record is associated with. We then can use
lookup APIs like &lt;code class=&quot;language-text&quot;&gt;find-by-kind&lt;/code&gt;. This method saves a kind and returns a vector
of hash-maps that correspond to that type.&lt;/p&gt;
&lt;p&gt;Running this spec we get the error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;No Datastore bound (hyperion/*ds*) or installed (hyperion/DS).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can fix this by setting the DB to be a in-memory database in our core.clj
file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; sample.core
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;DS&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;hyperion.memory &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;new-memory-datastore&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset!&lt;/span&gt; DS &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new-memory-datastore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have passing tests!&lt;/p&gt;
&lt;p&gt;We can add another test to make sure the database resets between tests.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;has a new database each test&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:kind&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find-by-kind&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should fail in conjunction with the other test. We can fix it by wrapping
our tests in a new-memory-datastore.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hyperion&quot;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;it&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;*ds* &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new-memory-datastore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This binds a new-memory-datastore for each test. Specs should now be passing.&lt;/p&gt;
&lt;p&gt;The rest of the Hyperion API can be found on its &lt;a href=&quot;https://github.com/8thlight/hyperion&quot;&gt;Github page&lt;/a&gt;.
As of this writing Hyperion currently supports Google App Engine, MySQL,
Postgres, Sqlite, Riak, and MongoDB. Using Hyperion the choosing a database
can happen far down the development pipeline as well switching out the DB is as
simple as changing a line of code.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pain based programming]]></title><description><![CDATA[According to Forbs, the number one cause of death is premature scaling.
I would like to venture that, like startups, the number one cause…]]></description><link>https://ekosz.github.io/archive/pain-based-programming/</link><guid isPermaLink="false">https://ekosz.github.io/archive/pain-based-programming/</guid><pubDate>Fri, 24 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;According to &lt;a href=&quot;http://www.forbes.com/sites/nathanfurr/2011/09/02/1-cause-of-startup-death-premature-scaling/&quot;&gt;Forbs&lt;/a&gt;, the number one cause of death is premature scaling.
I would like to venture that, like startups, the number one cause for
failure in software projects is premature flexibility.&lt;/p&gt;
&lt;p&gt;As programmers we are constantly sacrificing simplicity for flexibility. But
when do we make these decisions? Good refactoring techniques teach us to keep
code repeat low, and separate concerns whenever possible. We introduce
interfaces and split large classes into smaller ones.&lt;/p&gt;
&lt;p&gt;While we have good intentions many of us find our projects getting out of hand
even when following all of the “proper” techniques. The problem comes from the
fact that we are introducing this extra complexity without first feeling the
pain from the code we are trying to “fix”.&lt;/p&gt;
&lt;p&gt;Don’t add flexibility to code without first feeling the pain of their
rigidity. When pain based programming, each of your refactorings should reduce a
pain you’re feeling from your code. If you come out of a refactoring step and
the pain is still there, the refactoring was wrong. Don’t refactor if there is
no pain yet, even if you have a feeling that there will a problem later. You
may be right, but often you’re not.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Google oauth in Clojure]]></title><description><![CDATA[Recently in my Clojure project we had to integrate with Google’s OAuth for
authenticating our users. It was a pretty painful process, so…]]></description><link>https://ekosz.github.io/archive/oauth-in-clojure/</link><guid isPermaLink="false">https://ekosz.github.io/archive/oauth-in-clojure/</guid><pubDate>Thu, 23 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently in my Clojure project we had to integrate with Google’s OAuth for
authenticating our users. It was a pretty painful process, so here’s a quick
guide for anyone that wants to do this in the future.&lt;/p&gt;
&lt;p&gt;For this guide I will be using &lt;code class=&quot;language-text&quot;&gt;stuarth/clj-oauth2 &quot;0.3.2&quot;&lt;/code&gt;. First add that as
a dependency to your project.clj file. Next lets create a authentication
module.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ns&lt;/span&gt; authentication
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:require&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cheshire.core &lt;span class=&quot;token symbol&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;parse-string&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;clj-oauth2.client &lt;span class=&quot;token symbol&quot;&gt;:as&lt;/span&gt; oauth2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; login-uri
  &lt;span class=&quot;token string&quot;&gt;&quot;https://accounts.google.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; google-com-oauth2
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:authorization-uri&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;str&lt;/span&gt; login-uri &lt;span class=&quot;token string&quot;&gt;&quot;/o/oauth2/auth&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:access-token-uri&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;str&lt;/span&gt; login-uri &lt;span class=&quot;token string&quot;&gt;&quot;/o/oauth2/token&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:redirect-uri&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:8080/authentication/callback&quot;&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:client-id&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CLIENT&quot;&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:client-secret&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CLIENT-SECRET&quot;&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:access-query-param&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:access_token&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:scope&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://www.googleapis.com/auth/userinfo.email&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:grant-type&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;authorization_code&quot;&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:access-type&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;online&quot;&lt;/span&gt;
   &lt;span class=&quot;token symbol&quot;&gt;:approval_prompt&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; auth-req
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;oauth2/make-auth-request&lt;/span&gt; google-com-oauth2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn-&lt;/span&gt; google-access-token &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;oauth2/get-access-token&lt;/span&gt; google-com-oauth2 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:params&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; auth-req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn-&lt;/span&gt; google-user-email &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;access-token&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;response &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;oauth2/get&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://www.googleapis.com/oauth2/v1/userinfo&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:oauth&lt;/span&gt; access-token&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse-string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:body&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; Redirect them to (:uri auth-req)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; When they comeback to /authentication/callback&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;google-user-email&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;;=&gt; user&apos;s email trying to lgo in&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;google-access-token&lt;/span&gt; *request*&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what did we do here? First of all we required the OAuth2 dependency into
our namespace. We also included cheshire, Clojure’s JSON parsing library. Then we
created a hash &lt;code class=&quot;language-text&quot;&gt;google-com-oauth2&lt;/code&gt;. This hash contains all of the information Google
needs when we request a OAuth2 access token. Replace the :client-id and
:client-secret with the values you get from Google when you set up your Google
application. Also be sure that your :redirect-uri matches the one you supplied
Google.&lt;/p&gt;
&lt;p&gt;Using this data has we can construct a auth-req using our OAuth2 library. When
users go to our application, when they try and log on the app should redirect
them to &lt;code class=&quot;language-text&quot;&gt;(:uri authentication/auth-req)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the user gets back to our application it will be at out callback uri.
The request params of this request should look like,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:code&lt;/span&gt; &quot;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;/dasfjkhadsfkalsdasdfaskjf&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this request object we can get back a access-token from Google. Finally
once we have an access token, we get start making oauth/get’s to retrieve user
info from Google. I’ve written the method google-user-email, but you can get
other values from the user if you change the scope of your request.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Overriding functions in Clojure]]></title><description><![CDATA[While testing in an OO language it is common to mock objects out of the
picture. This could be do the fact that the object not yet…]]></description><link>https://ekosz.github.io/archive/overriding-functions-in-clojure/</link><guid isPermaLink="false">https://ekosz.github.io/archive/overriding-functions-in-clojure/</guid><pubDate>Wed, 22 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;While testing in an OO language it is common to mock objects out of the
picture. This could be do the fact that the object not yet implemented or
maybe it calls out to the third party service you rather not use when testing.&lt;/p&gt;
&lt;p&gt;Clojure provides us some tools to do the same thing with functions we may want
to mock out.&lt;/p&gt;
&lt;h3&gt;Dependency Injection&lt;/h3&gt;
&lt;p&gt;Like OO languages you can use dependency injection in a functional language like
Clojure. Lets say we have the following function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; do-work-son &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;third-party/big-function&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While testing we don’t want to have to wait for the third parts big function to
run. We can re-write the function to take a second argument of what function to
run on the argument.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; do-work-son &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arg worker&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;worker&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can pass what ever we want to the function. In production we call,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;do-work-son&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arg&quot;&lt;/span&gt; third-party/big-function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While during the test we can do some thing like,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;do-work-son&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arg&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;*&lt;/span&gt; % &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just to test that the function is being called.&lt;/p&gt;
&lt;h3&gt;Redefinition&lt;/h3&gt;
&lt;p&gt;Sometimes Dependency Injection is just out of the question or would make your
code too complicated. At these times we can redefine functions at run time
using &lt;code class=&quot;language-text&quot;&gt;with-redefs&lt;/code&gt;. Here is the above example using this method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; production code&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; do-work-son &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;third-party/big-function&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;;; test code&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with-redefs&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;third-part/big-function &lt;span class=&quot;token operator&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;*&lt;/span&gt; % &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;do-work-son&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Screaming architecture]]></title><description><![CDATA[When you look rails application you are greeted with a familiar
directory structure. Are given an app/ directory with the folders model…]]></description><link>https://ekosz.github.io/archive/screaming-architecture/</link><guid isPermaLink="false">https://ekosz.github.io/archive/screaming-architecture/</guid><pubDate>Tue, 21 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When you look rails application you are greeted with a familiar
directory structure. Are given an app/ directory with the folders model/,
view/, controller/. At the time of Rails inception this was considered a big
win in terms of convention over configuration. This forced developers to think
in terms of MVC and develop cleaner code. But over time developers realized
that this wasn’t the ideal way to organize code.&lt;/p&gt;
&lt;p&gt;What can we learn about an application from a rails directory? We know its
MVC, but thats about it. We don’t know what the application does or any of its
intent. What if it looked something like this?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app/
  user/
  bank_account/
  transfer/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We instantly know this is a banking application that has users and transfers.
That is the purpose of scream architecture. Inside each of those folders we
would include the models, views, and controllers for that component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app/
  user/
    user.rb
    user_controller.rb
    new.html.haml
  bank_account/
    bank_account.rb
    bank_account_controller.rb
  ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the information we need about a component is located in one location.&lt;/p&gt;
&lt;p&gt;So lets set up Joodo to allow this type of configuration. Joodo with a standard
MVC layout, that we’ll have to change.&lt;/p&gt;
&lt;p&gt;Lets edit the core.clj file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defroutes&lt;/span&gt; !-APP_NAME-!-routes
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render-template&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;controller-router&lt;/span&gt; &apos;!-APP_NAME-!.controller&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not-found&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render-template&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;not_found&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:template-root&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;!-DIR_NAME-!/view&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:ns&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;`&lt;/span&gt;!-APP_NAME-!.view.view-helpers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; app-handler
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;-&gt;&lt;/span&gt;
    !-APP_NAME-!-routes
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wrap-view-context&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:template-root&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;!-DIR_NAME-!/view&quot;&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:ns&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;`&lt;/span&gt;!-APP_NAME-!.view.view-helpers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important lines here are the controller-router and wrap-view-context. These
lines set Joodo looking the controller/ directory for controllers and view/
directory for views. Lets change those lines to be a little more free form.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defroutes&lt;/span&gt; !-APP_NAME-!-routes
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render-template&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;view/index&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;controller-router&lt;/span&gt; &apos;!-APP_NAME-!&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not-found&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render-template&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;view/not_found&quot;&lt;/span&gt;
                                  &lt;span class=&quot;token symbol&quot;&gt;:template-root&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;!-DIR_NAME-!&quot;&lt;/span&gt;
                                  &lt;span class=&quot;token symbol&quot;&gt;:layout&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;view/layout&quot;&lt;/span&gt;
                                  &lt;span class=&quot;token symbol&quot;&gt;:ns&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;`&lt;/span&gt;!-APP_NAME-!.view.view-helpers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; app-handler
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;-&gt;&lt;/span&gt;
    !-APP_NAME-!-routes
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wrap-view-context&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:template-root&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;!-DIR_NAME-!&quot;&lt;/span&gt;
                         &lt;span class=&quot;token symbol&quot;&gt;:layout&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;view/layout&quot;&lt;/span&gt;
                         &lt;span class=&quot;token symbol&quot;&gt;:ns&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;`&lt;/span&gt;!-APP_NAME-!.view.view-helpers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we changed the view-context to point to the app directory and the
controller-router to also point to the route directory. Because of these
changes we had to make a couple others to keep the application working the same
as it was. First off, a :layout option had to be added, as the layout file
will no longer be located where the views are stored. Also, global view files
must be explicitly told to be located in the view/ directory.&lt;/p&gt;
&lt;p&gt;Finally we can change up the directory structure. All of the models, views,
and controllers can be put in there own shared folders inside the app
directory. Then the controller/ and model/ folders can be removed. The view/
directory will now only store global views.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introduction to Joodo]]></title><description><![CDATA[This week I’m diving head first into Clojure and more specifically web
development in Clojure. Clojure has a view frameworks to choose from…]]></description><link>https://ekosz.github.io/archive/intro-to-joodo/</link><guid isPermaLink="false">https://ekosz.github.io/archive/intro-to-joodo/</guid><pubDate>Mon, 20 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This week I’m diving head first into Clojure and more specifically web
development in Clojure. Clojure has a view frameworks to choose from when
working with the web, but I’ll be talking about &lt;a href=&quot;http://www.joodoweb.com/&quot;&gt;Joodo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Joodo is a lightweight framework with a very small API. It tries to do the
least amount of work possible then get out of your way.&lt;/p&gt;
&lt;h3&gt;Instillation&lt;/h3&gt;
&lt;p&gt;First of all you’re going to want to have Leiningen 2 installed if its not
already.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; ~/bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; --no-check-certificate https://raw.github.com/technomancy/leiningen/preview/bin/lein ~/bin/ &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;755&lt;/span&gt; ~/bin/lein&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next update your &lt;code class=&quot;language-text&quot;&gt;~/.lein/profiles.clj&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;clojure&quot;&gt;&lt;pre class=&quot;language-clojure&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:plugins&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;joodo/lein-joodo &lt;span class=&quot;token string&quot;&gt;&quot;0.10.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create a Joodo project and start the server.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;lein joodo new sample
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample
lein joodo server
&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Boom! You’re up an running with Joodo. Next we’ll talk about the Joodo
directory structure and changes we can make to the configuration to make our
application be more expressive.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Logic-less views]]></title><description><![CDATA[Views are meant to be dumb displays of simple data. Because of that, views
should have no unit testing on top of them. If you feel that you…]]></description><link>https://ekosz.github.io/archive/logicless-views/</link><guid isPermaLink="false">https://ekosz.github.io/archive/logicless-views/</guid><pubDate>Mon, 13 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Views are meant to be dumb displays of simple data. Because of that, views
should have no unit testing on top of them. If you feel that you should be unit
testing your views, your application has not extracted enough functionality
away from the view layer.&lt;/p&gt;
&lt;p&gt;For example, my Tic Tac Toe board display like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1 | 2 | 3
4 | x | 6
o | 8 | 9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I first wrote the presentation logic it looked like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;@board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;grid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each_with_index &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
   row&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each_with_index &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;cell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
     print cell &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
   puts
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Very simple. Display a letter, if there is one, or display the number of the
cell. The only problem was that my view layer was no longer dumb. It know how
to count cells. Even the most simple logic should be extracted out of the view
layer. So I created a presenter instead.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BoardPresenter&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;board&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; board
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;grid&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;grid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each_with_index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
       row&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each_with_index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;cell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
         cell &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now my view layer is that more concise:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;BoardPresenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;@board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;grid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;row&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
  row&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;cell&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
    print cell
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  puts
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Impressing your friends with Ruby]]></title><description><![CDATA[I’ve been programing in Ruby for a few years now and along the way I’ve picked
up a few fun tricks that other programmers rarely seem to…]]></description><link>https://ekosz.github.io/archive/impressing-your-friends-with-ruby/</link><guid isPermaLink="false">https://ekosz.github.io/archive/impressing-your-friends-with-ruby/</guid><pubDate>Wed, 08 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’ve been programing in Ruby for a few years now and along the way I’ve picked
up a few fun tricks that other programmers rarely seem to know about. These are
good for showing off, but be careful using them in production code as they may
hiding the meaning of what’s going on.&lt;/p&gt;
&lt;h3&gt;&amp;#x26;method&lt;/h3&gt;
&lt;p&gt;Most Ruby developers know about calling &amp;#x26; on a symbol to turn it into a proc.
This is mostly used in map functions like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Is the same as&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;num&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to_s &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Symbol to proc creates a proc that expects one argument then calls that method
on that argument. But what if we wanted to do something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;num&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; something_awesome&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well this can be shortened too!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:something_awesome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# Save 4 characters!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Object#method&lt;/code&gt; method returns a method object corresponding to the symbol
its given. We then turn that method object into a proc using the &amp;#x26; operator.
That proc can then be used by the map function like any other proc.&lt;/p&gt;
&lt;h3&gt;concat strings with whitespace&lt;/h3&gt;
&lt;p&gt;There are a lot of ways to concat strings in Ruby.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;def&quot;&lt;/span&gt;&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;#=&gt; &quot;abcdef&quot;&lt;/span&gt;
&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;def&quot;&lt;/span&gt;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;#=&gt; &quot;abcdef&quot;&lt;/span&gt;
&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concat &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;def&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; &quot;abcdef&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But did you know you can also use whitespace to concat ruby strings?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;def&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; &quot;abcdef&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yep, that works and its valid ruby code. Why the Ruby developers thought that
this was a good language feature, I don’t know. But its there. This can cause
issues when you’re creating an array from strings.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Woops forgot a comma&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; [&quot;a&quot;, &quot;bc&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;call with current continuation&lt;/h3&gt;
&lt;p&gt;Call with current continuation, or “callcc”, is a feature from Lisp that was
carried over to Ruby. It is a little hard to explain, so lets give an example
to start.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;level_3&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cont&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  cont&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RETURN THIS&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;level_2&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cont&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  level_3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cont&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NEVER RETURNED&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;top_level_function&lt;/span&gt;&lt;/span&gt;
  callcc &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;cc&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; level_2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

puts top_level_function &lt;span class=&quot;token comment&quot;&gt;# =&gt; &quot;RETURN THIS&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So whats going on here? The callcc method takes a block, and provides
a Continuation object. If this continuation object is ever called, the program
will immediately jump from where ever it is, to just outside the callcc block.
This acts much like other ruby control flow statements like &lt;code class=&quot;language-text&quot;&gt;break&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;skip&lt;/code&gt;, and
&lt;code class=&quot;language-text&quot;&gt;retry&lt;/code&gt;. But instead of just jumping out of the current scope, it can jump as
far as it wants.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Don't settle for 99%]]></title><description><![CDATA[The goal for unit testing is 100% test coverage, but most developers will tell
you that not everything will be able to be tested. Most…]]></description><link>https://ekosz.github.io/archive/dont-settle/</link><guid isPermaLink="false">https://ekosz.github.io/archive/dont-settle/</guid><pubDate>Tue, 07 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The goal for unit testing is 100% test coverage, but most developers will tell
you that not everything will be able to be tested. Most programmers settle for
99% coverage. Don’t do that.&lt;/p&gt;
&lt;p&gt;There is no good enough when it comes to unit testing. Every line of code
of your program should be executed at least once. Lets take a look at an
example of code that is normally not tested.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;get_move_from_user&lt;/span&gt;&lt;/span&gt;
  cords &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@io&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;chomp

  &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IllegalMove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Bad input&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unless&lt;/span&gt; cards &lt;span class=&quot;token operator&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;token regex-literal&quot;&gt;&lt;span class=&quot;token regex&quot;&gt;/^\d+$/&lt;/span&gt;&lt;/span&gt;

  cords
&lt;span class=&quot;token keyword&quot;&gt;rescue&lt;/span&gt; IllegalMove &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; error
  display_text &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Illegal Move: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;. Please try again&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;retry&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example shows a rescue block with a retry. This is hard to test, as there
is no good way to make sure that the exception was raised. Instead of skipping
those two lines, we can create a IOMock object that takes an array of input to
return one at a time.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOMock&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@input&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;gets&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;@input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pop
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This now allows us to pass in multiple inputs, the first failing and the second
succeeding.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test_get_move_from_user&lt;/span&gt;&lt;/span&gt;
  mover &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  assert_equal &lt;span class=&quot;token string-literal&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mover&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_move_from_user
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Suddenly we’re two lines closer to 100%.&lt;/p&gt;
&lt;p&gt;Don’t settle. There is almost always a way to get 100%, and if not, you may be
doing something wrong.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[OTP: Gen Server part II]]></title><description><![CDATA[In my last post I introduced the concept of OTP and gen_server. This post
I hope to dive deeper into gen_server. We’ve already seen the…]]></description><link>https://ekosz.github.io/archive/otp-gen-server-part-ii/</link><guid isPermaLink="false">https://ekosz.github.io/archive/otp-gen-server-part-ii/</guid><pubDate>Mon, 06 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my last post I introduced the concept of OTP and gen_server. This post
I hope to dive deeper into gen_server.&lt;/p&gt;
&lt;p&gt;We’ve already seen the handle_cast callback method, but there are many other
callbacks in gen_server. Lets take a look at a couple.&lt;/p&gt;
&lt;h3&gt;handle_call(method, state)&lt;/h3&gt;
&lt;p&gt;handle_call is much like handle_cast as it in charge of updating the state of
the server, but it is used for asynchronous updates.&lt;/p&gt;
&lt;p&gt;handle_cast normally responds &lt;code class=&quot;language-text&quot;&gt;{:reply, result, new_state}&lt;/code&gt;, but handle_call
normally responds &lt;code class=&quot;language-text&quot;&gt;{:noreply, new_state}&lt;/code&gt;. handle_call should be used
whenever the method doesn’t need to know who is calling it, as well as doesn’t
need to return anything to its caller.&lt;/p&gt;
&lt;h3&gt;handle_info(message, state)&lt;/h3&gt;
&lt;p&gt;handle_info responds the same as handle_call, but it gets called when random
messages are sent to the server through the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;-&lt;/code&gt; operator. Normally this
doesn’t update the state of the server, but that is up to the developer.&lt;/p&gt;
&lt;h3&gt;terminate(reason, state)&lt;/h3&gt;
&lt;p&gt;The terminate method is called when the server is shutting down. This could
because of an error, one of the other methods told the server to shutdown, or
its parent is shutting down. The callback is only in charge of cleanup and doesn’t
return anything.&lt;/p&gt;
&lt;h3&gt;code_change(old, state, extra)&lt;/h3&gt;
&lt;p&gt;The code_change callback is called when the servers code is being updated.
The old parameter is a version number. This method makes sure that the state
is in a position where is can handle the code change. Don’t worry about the
extra parameter here it isn’t used other than large Erlang frameworks. This
method should return &lt;code class=&quot;language-text&quot;&gt;{:ok, new_state}&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[OTP: Gen Server]]></title><description><![CDATA[This will be the first of many posts coming up on Erlang’s OTP library. If
you have never heard of OTP, let me explain. When Erlang was…]]></description><link>https://ekosz.github.io/archive/otp-gen-server/</link><guid isPermaLink="false">https://ekosz.github.io/archive/otp-gen-server/</guid><pubDate>Fri, 03 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This will be the first of many posts coming up on Erlang’s OTP library. If
you have never heard of OTP, let me explain. When Erlang was first introduced
in the 80s certain patterns emerged over and over again. These patterns were
then extracted into a common library named, “The Open Telecom Protocol”, or OTP.
After 30 years OTP now has little to do with the Telecom, but the named has
stuck.&lt;/p&gt;
&lt;p&gt;OTP provides powerful abstractions to complex patterns and can make
development much easier as a Erlang or Elixir developer. This post will cover
one of the most commonly module of OTP, gen_server.&lt;/p&gt;
&lt;p&gt;As you may know, there is no global state in Erlang. While this alleviates much
of the headaches one might get with OO languages, this does create a challenge
when state must be shared across systems. Lets use the real life example of
Elixir’s ExUnit testing framework. If you need a refresher on how ExUnit works
read up on it &lt;a href=&quot;http://ekosz.github.com/2012/07/30/testing-elixir.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ExUnit runs in to phases, setup and test execution. During the setup phase,
ExUnit needs to keep track of every module that uses ExUnit and whether or not
the tests in that module should be run synchronously or asynchronously. These
modules will then be used throughout ExUnit. Without global state we would need to
pass these modules around throughout the program adding an extra parameter to
many methods. One could see how this could get out of hand very quickly. This
is where gen_server comes in.&lt;/p&gt;
&lt;p&gt;gen_server lets Erlang and Elixir programs fake global state. Lets write
a simple program to work off of.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;defmodule Incrementor &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;

  use GenServer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Behavior

  defrecord State&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# Callbacks&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;handle_call&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    new_state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;increment_counter
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:reply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; new_state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; new_state&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;handle_call&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# In iex&lt;/span&gt;

&lt;span class=&quot;token symbol&quot;&gt;:gen_server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:local&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Incrementor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Incrementor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token symbol&quot;&gt;:gen_server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Incrementor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; 1&lt;/span&gt;
&lt;span class=&quot;token symbol&quot;&gt;:gen_server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Incrementor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; 2&lt;/span&gt;
&lt;span class=&quot;token symbol&quot;&gt;:gen_server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Incrementor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#=&gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, what did we do there? First thing was create a module and use the
GenServer behavior. That notifies the Erlang VM that this module will respond to
certain methods that the gen_sever module expects much like an interface in
OO languages. Next we define a record that our server will use internally for
record keeping. Finally we get to the meat of the server, the callbacks.&lt;/p&gt;
&lt;p&gt;These are the methods that gen_server will use to customize its behavior. The
init method takes some arguments (that we don’t use here), and expects
a response of &lt;code class=&quot;language-text&quot;&gt;{:ok, some_initial_state}&lt;/code&gt;. This will set the initial state of
the server. Next we have handle_call. Handle call takes a method thats being
called, who is calling the method, and the current state of the server. It
expects something will happen inside the method, then a response of
&lt;code class=&quot;language-text&quot;&gt;{:reply, the_result, the_new_state_of_the_server}&lt;/code&gt;. Our server patterns
matches of the :add method, and supers all other method calls.&lt;/p&gt;
&lt;p&gt;Using this pattern, the server will always have a state and that state can then
be queried by outside modules.&lt;/p&gt;
&lt;p&gt;In my next posts, I’ll go over some of the other call backs our server can
implement for more dynamic behavior.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Endless pagination in Jekyll]]></title><description><![CDATA[Yesterday I decided to move my blog over from my own custom solution to Jekyll.
The process mostly involved renaming and shuffling a lot…]]></description><link>https://ekosz.github.io/archive/endless-pagination-in-jekyll/</link><guid isPermaLink="false">https://ekosz.github.io/archive/endless-pagination-in-jekyll/</guid><pubDate>Thu, 02 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Yesterday I decided to move my blog over from my own custom solution to &lt;a href=&quot;https://github.com/mojombo/jekyll/&quot;&gt;Jekyll&lt;/a&gt;.
The process mostly involved renaming and shuffling a lot files
around. After 20 mins I was able to start the Jekyll server and saw my blog, but it
was missing its endless pagination I had built into the last version. Some quick
Googling showed a distinct lack of endless pagination in Jekyll, so I
decided to reimplement it myself.&lt;/p&gt;
&lt;p&gt;The first thing needed was to add pagination to the _config.yml file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;paginate: 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then add the paginate link to the bottom of the index page.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{{ &quot;{% raw &quot; }}%}
{{ &quot;{% if paginator.next_page &quot; }}%}
&amp;lt;div id=&apos;next&apos;&gt;
  &amp;lt;a href=&quot;/page{{paginator.next_page}}&quot;&gt;Next &gt;&gt;&amp;lt;/a&gt;
&amp;lt;/div&gt;
{{ &quot;{% endif &quot; }}%}
{{ &quot;{% endraw &quot; }}%}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now to add some javascript that would replace the next link with the posts from
the next page when the user scrolled to it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rebind&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#next&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; self &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#next a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#posts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;rebind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code finds the #next element and attaches a function to its appear event.
That function fades out the element, grabs the HTML from the page its pointing
to, removes the element, appends the #posts from that page to the #main
element, and finally rebinds to the next #next element.&lt;/p&gt;
&lt;p&gt;Wallah! Endless pagination with Jekyll in 12 lines of code.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Outdated in 60 secs]]></title><description><![CDATA[In my last post I talked about Make and Makefiles in Elixir projects. It turns
out that that post is already outdated information. What…]]></description><link>https://ekosz.github.io/archive/outdated-in-60-secs/</link><guid isPermaLink="false">https://ekosz.github.io/archive/outdated-in-60-secs/</guid><pubDate>Wed, 01 Aug 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my last post I talked about Make and Makefiles in Elixir projects. It turns
out that that post is already outdated information.&lt;/p&gt;
&lt;h3&gt;What happened?&lt;/h3&gt;
&lt;p&gt;This morning Elixir 0.6.0 was released and with that release the Mix project.
Mix is a tool written in Elixir that replaces Make. Mix tracks dependences,
packages your applications, runs tests and generally makes life better as
a Elixir developer.&lt;/p&gt;
&lt;p&gt;If you’re interested you can read about the project &lt;a href=&quot;http://elixir-lang.org/getting_started/mix.html&quot;&gt;on the elixir
site&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What does this mean?&lt;/h3&gt;
&lt;p&gt;Open source software moves fast. Like really fast. The last version of Elixir
was released 2 months ago, and already much as changed in development
practices. There were 453 commits between Elixir 0.5.0 and 0.6.0. Thats about
8 commits a day. 18,000 lines were added and 7,000 were removed.&lt;/p&gt;
&lt;p&gt;Because so much is going on all the time, without being deeply involved in an OSS
community, its hard to contribute back to it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Elixir make files]]></title><description><![CDATA[One of the common practices in Elixir is to use Makefiles and the Make compiling
utility. Make was first released in 1977 and can be found…]]></description><link>https://ekosz.github.io/archive/elixir-make-files/</link><guid isPermaLink="false">https://ekosz.github.io/archive/elixir-make-files/</guid><pubDate>Tue, 31 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the common practices in Elixir is to use Makefiles and the Make compiling
utility. Make was first released in 1977 and can be found installed on almost
all *nix systems. Make uses a series of commands to compile projects. These
commands are written in a Makefile. When Make runs, it checks to see if
a Makefile exists in the current directory, and if so uses it.&lt;/p&gt;
&lt;p&gt;Makefiles can be tricky if you don’t know what you’re doing, so in this post
I’ll try an explain the base Makefile I use in my Elixir projects.&lt;/p&gt;
&lt;p&gt;First thing to do is pick a location for our compiled code. I normally use the
ebin directory. Lets set that to a variable.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EBIN_DIR=ebin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Variables in Make are set using capital letters. Next we need to write our compile
task.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;compile: ebin

ebin: lib/*.ex
  @ rm -f ebin/::*.beam
  @ echo Compiling ...
  @ mkdir -p $(EBIN_DIR)
  @ touch $(EBIN_DIR)
  elixirc lib/**/*.ex -o $(EBIN_DIR)
  @ echo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tasks are written with the task name on the left, then a series of targets on
the right. A target can be a group of files, or another task. If the target is
a group of files, the task will only execute if the files have changed since it
last ran.&lt;/p&gt;
&lt;p&gt;In this case our compile task’s only target is the ebin task, though more can
be added later. The ebin task watches all of the &lt;code class=&quot;language-text&quot;&gt;.ex&lt;/code&gt; files in the lib
directory. If any of them have changed since the last time the task was run, it
will remove all of the old compiled code, make sure the ebin directory
exists, then use the &lt;code class=&quot;language-text&quot;&gt;elixirc&lt;/code&gt; command to compile the code and output the
result to the ebin.&lt;/p&gt;
&lt;p&gt;Using make we can also create a test task.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;test: compile
  @ echo Running tests ...
  time elixir -pa ebin -r &quot;test/**/*_test.exs&quot;
  @ echo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our test task makes sure the code is compiled, the uses the regular &lt;code class=&quot;language-text&quot;&gt;elixir&lt;/code&gt;
command to load up the compiled code, then execute all of the tests.&lt;/p&gt;
&lt;p&gt;Using Make, we can continue to add tasks to our program automating any
procedure we seem to be doing over and over again.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Testing Elixir]]></title><description><![CDATA[When learning a new linage, one of the first steps one needs to take is
learning its testing frameworks. Elixir being a relatively new…]]></description><link>https://ekosz.github.io/archive/testing-elixir/</link><guid isPermaLink="false">https://ekosz.github.io/archive/testing-elixir/</guid><pubDate>Mon, 30 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When learning a new linage, one of the first steps one needs to take is
learning its testing frameworks. Elixir being a relatively new language, it
only has one ExUnit. In this blog post, I’ll walk you through writing your
first tests.&lt;/p&gt;
&lt;p&gt;First thing to note are that Elixir tests are written in &lt;code class=&quot;language-text&quot;&gt;.exs&lt;/code&gt; files, not the
standard &lt;code class=&quot;language-text&quot;&gt;.ex&lt;/code&gt; Elixir file format. &lt;code class=&quot;language-text&quot;&gt;.exs&lt;/code&gt; files are written in the Elixir
language, but are never compiled only ever interpreted.&lt;/p&gt;
&lt;p&gt;Now lets jump into some code. First lets create a test helper.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ mkdir test
$ touch test/test_helper.exs

### Inside test_helper.exs

ExUnit.start []&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats all we need to get started. We can later put utility methods in here, if
they’re needed. Now lets write a testing module.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;### Inside adder_test.exs

Code.require_file &quot;../test_helper&quot;, __FILE__

defmodule Adder.Test do
  use ExUnit.Case, async: true
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we do a few things. Require the test_helper file we just wrote, create
the module we will fill with tests, and import the ExUnit.Case methods. One
thing to note here is the async option on ExUnit.Case. When set to true, all
the of the tests will run in parallel. Whenever possible set this to true. Lets
write a test.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;test &quot;adds one and one correctly&quot; do
  assert 2 == 1 + 1
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like many other languages ExUnit uses the standard assert clauses, but wraps
them in a test block. We can run this test with the command &lt;code class=&quot;language-text&quot;&gt;elixir test/adder_test.exs&lt;/code&gt;. If everything was written correctly you should see:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.

1 test, 0 failures.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Woot! We ran our first Elixir test. Now lets stream line the process with
a shell script.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# Inside tester.sh

elixir -r &quot;lib/**/*.ex&quot; -r &quot;test/test_helper.exs&quot; -pr &quot;test/**/*_test.exs&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script will load every &lt;code class=&quot;language-text&quot;&gt;.ex&lt;/code&gt; file in your lib directory, then require the
test helper, and then load each test file sequentially.&lt;/p&gt;
&lt;p&gt;Thats it. Now just &lt;code class=&quot;language-text&quot;&gt;sh tester.sh&lt;/code&gt; to run all your tests. Have fun!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Simple TCP server in Elixir]]></title><description><![CDATA[One of my favorite functional languages is Erlang. First created in 1986,
Erlang is a highly concurrent language with high fault tolerance…]]></description><link>https://ekosz.github.io/archive/simple-tcp-server-in-elixir/</link><guid isPermaLink="false">https://ekosz.github.io/archive/simple-tcp-server-in-elixir/</guid><pubDate>Fri, 27 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of my favorite functional languages is Erlang. First created in 1986,
Erlang is a highly concurrent language with high fault tolerance. It a great
tool to have for any programmer. That being said, Erlang definitely shows its
age and is missing many features that modern day languages excel at.&lt;/p&gt;
&lt;p&gt;That’s where the Elixir project comes in. Elixir is a language built on the
Erlang VM, that keeps all of the amazing abilities of Erlang, but adds features like;
functional meta-programming, polymorphism via Clojure-like protocols, and hashes
(or maps as they’re called in other languages).&lt;/p&gt;
&lt;p&gt;Erlang is known for its server capabilities, and here I’m going to show just how
easy it is to create a simple TCP server in Elixir.&lt;/p&gt;
&lt;p&gt;First we declare a name-space for our functions.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defmodule TCPServer do
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then create a listen function that takes a port.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defmodule TCPServer
  def listen(port) do
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can fill in that method with some content. We will be using the
gen_tcp module from Erlang. The way we call down to Erlang from Elixir is to
just call the module as a atom.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def listen(port) do
  tcp_options = [:list, {:packet, 0}, {:active, false}, {:reuseaddr, true}]

  {:ok, l_socket} = :gen_tcp.listen(port, tcp_options)

  do_listen(l_socket)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line just declares some options for the &lt;code class=&quot;language-text&quot;&gt;:gen_tcp.listen&lt;/code&gt; method.
The second line assign the &lt;code class=&quot;language-text&quot;&gt;l_socket&lt;/code&gt; variable. Finally we call the unwritten
method &lt;code class=&quot;language-text&quot;&gt;do_listen&lt;/code&gt; with our new &lt;code class=&quot;language-text&quot;&gt;l_socket&lt;/code&gt;. Lets write that.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defp do_listen(l_socket) do
  {:ok, socket} = :gen_tcp.accept(l_socket)

  spawn(fn() -&gt; do_server(socket) end)

  do_listen(l_socket)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we grab a real socket from our &lt;code class=&quot;language-text&quot;&gt;l_socket&lt;/code&gt; when someone connects. Then we
spawn our server from that socket. Finally we loop back around a continue to
listen to that port. Finally lets write the meat of our TCP Server.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defp do_server(socket) do
  case :gen_tcp.recv(socket, 0) do

    { :ok, data } -&gt;
      :gen_tcp.send(socket, data)
      do_server(socket)

    { :error, :closed } -&gt; :ok
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We create a case statement around the data we receive from the socket. When they
pass us good data, we just echo it back to them, then continue to listen. When
we get the signal that they disconnected, we drop out of our loop and the thread
dies.&lt;/p&gt;
&lt;p&gt;Thats it! The entire program is 20 lines long, and very readable. I will
continue to update this blog with more complex examples of what you can do with
Elixir.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Do not count on persistent state]]></title><description><![CDATA[Today I finished moving my Tic Tac Toe program to the web. Before the game ran
on a loop, and a single game object was constantly fed new…]]></description><link>https://ekosz.github.io/archive/do-not-count-on-persistent-state/</link><guid isPermaLink="false">https://ekosz.github.io/archive/do-not-count-on-persistent-state/</guid><pubDate>Thu, 26 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Today I finished moving my Tic Tac Toe program to the web. Before the game ran
on a loop, and a single game object was constantly fed new moves. You can’t do
this with web based UI. Every web request starts with a blank slate. There is
no persistence between requests.&lt;/p&gt;
&lt;p&gt;Don’t fall into the trap of expecting your objects to always be there.
Netflix forces their developers to not relay on any object or service. They
created the program
&lt;a href=&quot;http://techblog.netflix.com/2010/12/5-lessons-weve-learned-using-aws.html&quot;&gt;Chaos Monkey&lt;/a&gt;.
Chaos Monkey randomly kills instances and services running on Netflix’s
servers. This way, code must be written in a way that does not assume
persistence.&lt;/p&gt;
&lt;p&gt;Code written this way ends up being more robust, and can interface with more
mores of communication.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Refactoring]]></title><description><![CDATA[Programs rot. Without tender love and care, they become unmaintainable. They
only way to fight this process is through continuous…]]></description><link>https://ekosz.github.io/archive/refactoring/</link><guid isPermaLink="false">https://ekosz.github.io/archive/refactoring/</guid><pubDate>Wed, 25 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Programs rot. Without tender love and care, they become unmaintainable. They
only way to fight this process is through continuous refactoring.&lt;/p&gt;
&lt;p&gt;A feature is not done when its working. Its done after its working and
refactored. There is no set and forget in the software world. If we move on
from a piece of code, before we refactor, we add to the projects technical
dept. Do this too often, and the team will be forced to try and write a check
that it can’t cash.&lt;/p&gt;
&lt;p&gt;If you are afraid to refactor, as it might break existing code, write more
tests. Tests prove that software works. With near 100% test coverage one can
be sure that if the test pass, nothing is broken. Keep writing tests until
your fears are gone. With no fear, a team can refactor to their hearts’
content.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Code katas]]></title><description><![CDATA[When I was a kid I remember taking a karate class for gym. During the class
we were taught to perform “katas”. Katas were a series of moves…]]></description><link>https://ekosz.github.io/archive/code-katas/</link><guid isPermaLink="false">https://ekosz.github.io/archive/code-katas/</guid><pubDate>Tue, 24 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When I was a kid I remember taking a karate class for gym. During the class
we were taught to perform “katas”. Katas were a series of moves that would be
performed after one another in a set sequence. Almost like a dance. Right
punch, left punch, right kick, left kick, etc. To a 8 year old I thought it was
the most boring thing in the world. And when I learned about Code Katas many
years later, I had the same wrong first impression.&lt;/p&gt;
&lt;p&gt;Code Katas are problems that programmer can preform over and over again. The
focus isn’t on the answer to the problem, but the process in which its solved.
Katas are meant to help practice good TDD habits and train programmers to look
at problems as a series of failing tests.&lt;/p&gt;
&lt;p&gt;Though katas may a first glace seem like a waste of time, they aren’t. After
trying out a few, and solving them over and over again I definitely felt the
Flow. The Flow is the feeling one gets when they are doing TDD right. Red,
Green, Refactor. Almost every programmer knows this idiom, but I don’t think
they all have felt it. TDD, when done correctly, is a super responsive feed back
loop.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t write any production code without writing failing test&lt;/li&gt;
&lt;li&gt;Don’t write more test code than it takes to create a failing test&lt;/li&gt;
&lt;li&gt;Don’t write more production code than it takes to pass the test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When following these steps each TDD loop should take a little under a minute.
After doing this 15 minutes strait one will start to feel the Flow, and
productivity will take off.&lt;/p&gt;
&lt;p&gt;Every programmer should practice katas as they teach how to get into the Flow.
Once in the Flow you’re biggest worry becomes how to make sure you’re not
taken out of the Flow.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Clojure first impressions]]></title><description><![CDATA[First of all, a little background about my experience with Clojure before now.
Though I have never written in Clojure before, I have…]]></description><link>https://ekosz.github.io/archive/clojure-first-impressions/</link><guid isPermaLink="false">https://ekosz.github.io/archive/clojure-first-impressions/</guid><pubDate>Mon, 23 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;First of all, a little background about my experience with Clojure before now.
Though I have never written in Clojure before, I have programmed functionally
using Erlang, and have written my own Lisp-like language. That gave me the
background needed so that Clojure shouldn’t have been too much of a culture shock.&lt;/p&gt;
&lt;p&gt;That being said, there was a lot of culture shock. For the past 3 years I have
been a Ruby developer. Though I have played around with many languages, at the
end of the day Ruby was what put bread on the table. Clojure forced me to
think in a much different way than I was used to.&lt;/p&gt;
&lt;p&gt;In OO languages one thinks in terms of Objects. In functional languages one
thinks in terms of Functions. While this may seem obvious, its important. Data
is not longer coupled to behavior and all of the helper methods I had become
used to in Ruby were gone. Enumerables like List and Vector had to be traversed
manually. There is no each method anymore.&lt;/p&gt;
&lt;p&gt;Probably the biggest difficulty I had with Clojure was not knowing its
Core API. There are two parts to every language; grammar and vocabulary. Grammar
is the syntax of the language, and vocab are its ideas in terms of words. For
most programmers, learning the grammar of a new language is the easy part.
Though languages looks different they all have the basics; variables, conditionals,
and methods. Learning grammar is just acclimating to a languages flavor of these
basics. Vocab on the other hand is hard. Vocab, for the most part, has no
basics. Every language is allowed to have as much or as little vocab as it
likes. Some languages, like Ruby, have massive standard libraries that
encapsulate tons of ideas. Clojure on the other hand has a very tiny standard
library. Ideas in Clojure need to be expressed very precisely. Not knowing the
vocab makes it very hard to program in.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tracking down slow code]]></title><description><![CDATA[Sometimes code runs slowly. A method call takes longer than you expect, and
your application starts becoming unresponsive. When this happens…]]></description><link>https://ekosz.github.io/archive/tracking-down-slow-code/</link><guid isPermaLink="false">https://ekosz.github.io/archive/tracking-down-slow-code/</guid><pubDate>Fri, 20 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Sometimes code runs slowly. A method call takes longer than you expect, and
your application starts becoming unresponsive. When this happens, having the
know-how and the proper tools becomes invaluable.&lt;/p&gt;
&lt;p&gt;The first thing when solving any software problem, is to write a failing test.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;describe TheProblem do
  context &quot;performace&quot; do
    before { require &apos;benchmark&apos; }

    it &quot;will not be slow&quot; do
      # Should not take more than 200 miliseconds
      Benchmark.realtime { subject.big_method }.should &amp;lt; 0.2
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After making sure the test if failing, its time to get started finding where
the delay is coming from. This is what my method looked like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def big_method
  80.times do |i|
    32.times do |j|
      @world.at(i, j).draw
    end
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now where is the delay coming from? The loops? The #at method? Or the #draw
method? Using irb I tested each one.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; Benchmark.realtime { 80.times { |i| 32.times { |j| } } }
=&gt; 0.0003819465637207031

&gt; Benchmark.realtime { Tile.new.draw }
=&gt; 0.0006836104814734871

&gt; Benchmark.realtime { World.new.at(0, 0) }
=&gt; 0.0324843261943507120&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bingo! The slowdown is in the #at method. Now wash rinse and repeat using the
code in the #at method.&lt;/p&gt;
&lt;p&gt;It turned out, eventually my code called Array#transpose which is a very slow
piece of code. I changed &lt;code class=&quot;language-text&quot;&gt;array.transpose[x][y]&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;array[y][x]&lt;/code&gt; and my
failing test passed.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting started with Ruby curses]]></title><description><![CDATA[This week I was playing around with creating a complex terminal game.
I immediately though about Curses. If you don’t know Curses is an old…]]></description><link>https://ekosz.github.io/archive/getting-started-with-ruby-curses/</link><guid isPermaLink="false">https://ekosz.github.io/archive/getting-started-with-ruby-curses/</guid><pubDate>Thu, 19 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This week I was playing around with creating a complex terminal game.
I immediately though about Curses.&lt;/p&gt;
&lt;p&gt;If you don’t know Curses is an old C library for manipulating text in the
terminal. It, and its newer brother NCurses, has been used to create
applications from famous games to text editors.&lt;/p&gt;
&lt;h3&gt;The Good&lt;/h3&gt;
&lt;p&gt;I found out that Curses is actually built into most distributions of Ruby.
That means getting started with Curses is only a require away.&lt;/p&gt;
&lt;h3&gt;The Bad&lt;/h3&gt;
&lt;p&gt;Seeing how Curses is a 30+ year old library, its syntax is very un-ruby like and
needs a bit of knowhow.&lt;/p&gt;
&lt;p&gt;The first thing to when learning how to use Curses with Ruby is read the
&lt;a href=&quot;http://www.ruby-doc.org/stdlib-1.9.3/libdoc/curses/rdoc/Curses.html&quot;&gt;documentation on
ruby-doc.org&lt;/a&gt;.
The documentation there gives some sample problems, and an intro to the syntax.
Unfortunately, other than the sample problems the documentation is sadly
lacking. Here’s some features that the docs don’t cover.&lt;/p&gt;
&lt;h3&gt;Colors&lt;/h3&gt;
&lt;p&gt;Colors in Curses a defined in terms of color_pairs. A color_pair is two
colors, the first being the foreground color and the second being the
background. Color pairs must be defined before they are used.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Curses.init_pair(COLOR_BLUE,COLOR_BLUE,COLOR_BLACK)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create the COLOR_BLUE color pair with a blue foreground and a black
background. Using this color pairs have a funny syntax as well.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Curses.attron(color_pair(COLOR_BLUE)|A_NORMAL) {
  Curses.addstr(&quot;I&apos;m in blue!!&quot;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Curses.attron takes a hash of attributes that it then applies to the block it
receives. The color_pair and the A_NORMAL constant work together to create
a full attributes hash thats needed.&lt;/p&gt;
&lt;p&gt;It my next post I’ll talk about speed.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The danger of too many classes]]></title><description><![CDATA[In my last post I talked about refactoring its advantages. But there is
a danger of refactoring too much. By following all the right rules…]]></description><link>https://ekosz.github.io/archive/the-danger-of-too-many-classes/</link><guid isPermaLink="false">https://ekosz.github.io/archive/the-danger-of-too-many-classes/</guid><pubDate>Mon, 16 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my last post I talked about refactoring its advantages. But there is
a danger of refactoring too much. By following all the right rules, even while
supposedly doing the right thing, your code may become a mess.&lt;/p&gt;
&lt;p&gt;This happened to me. Using the two tools I mentioned, Pelusa and Reek, I had
refactored one of my algorithms from class to 6, and doubled my code size.
Every class was shorter, but combined they caused a new problem.&lt;/p&gt;
&lt;p&gt;As programmers, we have to juggle many concepts at the same time while solving
a problem. Each class I introduced added another ball I had to mentally keep
track of. Eventually I couldn’t remember the difference between GameState and
GameMove and when I should use one or the other.&lt;/p&gt;
&lt;p&gt;The beauty of refactoring comes from its balance. The goal of refactoring is to
make your code more expressive and understandable. It is very easy to refactor
too much and too far and the code emerges more scattered and confusing than
any time before.&lt;/p&gt;
&lt;p&gt;Before you extract another class ask yourself, does this make my problem
easier to understand. If not, you’re doing something wrong.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Static code analysis]]></title><description><![CDATA[On the way to being a great programmer, everyone hits the same roadblock. Code
Smells. One of the tools I have started using to help me…]]></description><link>https://ekosz.github.io/archive/static-code-analysis/</link><guid isPermaLink="false">https://ekosz.github.io/archive/static-code-analysis/</guid><pubDate>Thu, 12 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On the way to being a great programmer, everyone hits the same roadblock. Code
Smells. One of the tools I have started using to help me recognize and locate
code smells is “Static Code Analysis”.&lt;/p&gt;
&lt;p&gt;Static code analysis is the process of running a program that instead of
running your code, looks at how it was written. Though there are many of these
tools out there, the two I’ve become reliant on are &lt;a href=&quot;https://github.com/troessner/reek&quot;&gt;Reek&lt;/a&gt; and &lt;a href=&quot;https://github.com/codegram/pelusa&quot;&gt;Pelusa&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Reek&lt;/h3&gt;
&lt;p&gt;Reek is the older of the two tools and provides a good foundation for programmers to
get started with.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;threebythree_implementations/brute_force_implementation.rb -- 5 warnings:
  TicTacToe::BruteForceImplementation#block_fork! has approx 7 statements (LongMethod)
  TicTacToe::BruteForceImplementation#corner_from_index has approx 6 statements (LongMethod)
  TicTacToe::BruteForceImplementation#each_position calls Board::SIZE.times twice (Duplication)
  TicTacToe::BruteForceImplementation#each_position contains iterators nested 2 deep (NestedIterators)
  TicTacToe::BruteForceImplementation#each_position doesn&apos;t depend on instance state (LowCohesion)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reek looks at ones code, and provides a quick summary for whats wrong. The
best part of reek, is its &lt;a href=&quot;https://github.com/troessner/reek/wiki/Code-Smells&quot;&gt;Wiki&lt;/a&gt;.&lt;br&gt;
There one can get detailed descriptions of the code smells it finds, how suggestions
how how to fix them.&lt;/p&gt;
&lt;h3&gt;Pelusa&lt;/h3&gt;
&lt;p&gt;Pelusa is a relatively new comer to the SCA tools and definitely not for the faint
of heart. Based on &lt;a href=&quot;http://binstock.blogspot.com/2008/04/perfecting-oos-small-classes-and-short.html&quot;&gt;this blog post&lt;/a&gt; Pelusa is a harsh grader.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class GameTree
    ✿ Is below 50 lines ✗
  This class has 63 lines.
    ✿ Uses less than 3 ivars ✗
  This class uses 5 instance variables: @evaluator, @state, @depth, @alpha, @beta.
    ✿ Respects Demeter law ✗
  There are 1 Demeter law violations in lines 123.
    ✿ Doesn&apos;t use more than one indentation level inside methods ✗
  There&apos;s too much indentation in lines 138, 157.
    ✿ Doesn&apos;t use else clauses ✓
    ✿ Doesn&apos;t use getters, setters or properties ✓
    ✿ Doesn&apos;t mix array instance variables with others ✓
    ✿ Uses descriptive names ✓
    ✿ Methods have short argument lists ✗
  Methods with more than 3 arguments: initialize
    ✿ Doesn&apos;t use eval statement ✓&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, Pelusa goes the extra step to make sure your code is following
the very best OO design patterns. Getting a perfect score may be hard, but if
done, your code will thank you.&lt;/p&gt;
&lt;p&gt;As one grows as a programmer, they’ll probably find that SCA tools become less
useful as they can spots smells easier. But for new programmers trying to up
their game, I can’t suggest them enough.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Minimax tic tac toe]]></title><description><![CDATA[I already implemented TicTacToe using heuristics, today I was given the task to
reimplement my TicTacToe AI using the MiniMax algorithm. If…]]></description><link>https://ekosz.github.io/archive/minimax-tic-tac-toe/</link><guid isPermaLink="false">https://ekosz.github.io/archive/minimax-tic-tac-toe/</guid><pubDate>Wed, 11 Jul 2012 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I already implemented TicTacToe using heuristics, today I was given the task to
reimplement my TicTacToe AI using the MiniMax algorithm.&lt;/p&gt;
&lt;p&gt;If you don’t already know, MiniMax is an algorithm that can be used in two
player games such as Chess, Checkers, or TicTacToe. Using a game tree the
algorithm tries to maximize rewards during your turn, and minimize rewards
during the opponents turn. Hence its name “Minimax”.&lt;/p&gt;
&lt;p&gt;There are two parts to the MiniMax algorithm: the evaluator and the game tree
logic.&lt;/p&gt;
&lt;h3&gt;Evaluator&lt;/h3&gt;
&lt;p&gt;The evaluator is custom to the each implantation of Minimax. Its job
is to take a game state, and rank it. For TicTacToe its job is simple.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;You Won:   1
You Lost: -1
Cats:      0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The numbers aren’t important, as long as they are in ascending order of what
you want to happen. Each game will have their own evaluator. The more complex
the game, the more complex the evaluator will have to be.&lt;/p&gt;
&lt;h3&gt;The Game Tree&lt;/h3&gt;
&lt;p&gt;The other part of the Minimax algorithm is the game tree logic, which is the
same for all of its implementations.&lt;/p&gt;
&lt;p&gt;The basic pattern looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class GameTree
  def initialze(game_state, player, whos_turn=nil)
    @game_state, @player = game_state, player
    @whos_turn = whos_turn || player
  end

  def best_move
    children.max(&amp;amp;:score).move
  end

  def score
    return  1 if game_state.over? &amp;amp;&amp;amp; game_state.winner == player
    return -1 if game_state.over? &amp;amp;&amp;amp; game_state.winner == @opponent
    return  0 if game_state.over?

    if whos_turn == player
      children.map { |child| child.score }.max
    else
      children.map { |child| child.score }.min
    end
  end

  def children
    potential_moves.map { |move| GameTree.new(move, player, next_turn) }
  end

  # ...
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Chrome web store]]></title><description><![CDATA[Last week I launched Japanese Vocab Tutor mostly to be able to say I published an app. The actual application took about two days to create…]]></description><link>https://ekosz.github.io/archive/chrome-web-store/</link><guid isPermaLink="false">https://ekosz.github.io/archive/chrome-web-store/</guid><pubDate>Tue, 31 May 2011 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Last week I launched &lt;a href=&quot;https://chrome.google.com/webstore/detail/ldemblkooloonmjfiainhkhmmlelfnfb&quot;&gt;Japanese Vocab Tutor&lt;/a&gt; mostly to be able to say I published an app. The actual application took about two days to create and style, and is a pretty basic flash card application with some nice features. The real problem happened on the third day, hooking it up to the Google Licence API. This was a lot harder then I thought it would be.&lt;/p&gt;
&lt;p&gt;I used three tools to pull it off:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; - For running the show&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/josh/rack-openid&quot;&gt;Rack OpenID&lt;/a&gt; - To grab the users Google OpenID ID (confusing I know)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://signet.rubyforge.org/&quot;&gt;Signet Oauth Client&lt;/a&gt; - To access the Google Licence API&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First require all of it&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;require &apos;rubygems&apos;
require &apos;sinatra&apos;
require &apos;json&apos;
require &apos;signet/oauth_1/client&apos;
require &apos;rack/openid&apos;

use Rack::Session::Cookie
enable :sessions
use Rack::OpenID&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now for the fun stuff&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;get &apos;/login&apos; do
    # Have provider identifier, tell rack-openid to start OpenID process
    headers &apos;WWW-Authenticate&apos; =&gt; Rack::OpenID.build_header(
      :identifier =&gt; &quot;https://www.google.com/accounts/o8/id&quot;,
      :required =&gt; [&quot;http://specs.openid.net/auth/2.0/identifier_select&quot;],
      :realm =&gt; &quot;&amp;lt;YOURSITEHERE&gt;&quot;,
      :return_to =&gt; url_for(&apos;/openid/complete&apos;),
      :method =&gt; &apos;post&apos;)
    halt 401, &apos;Authentication required.&apos;
end

get &apos;/logout&apos; do
  session.clear
  redirect &apos;/&apos;
end

# Handle the response from the OpenID provider
post &apos;/openid/complete&apos; do
  resp = request.env[&quot;rack.openid.response&quot;]
  if resp.status == :success
    client = Signet::OAuth1::Client.new(
      :client_credential_key =&gt; consumer_key,
      :client_credential_secret =&gt; consumer_secret,
      :token_credential_key =&gt; oauth_token,
      :token_credential_secret =&gt; oauth_token_secret
    )
    openid_uri = Signet::OAuth1.encode(resp.identity_url)
    request_uri =  &apos;https://www.googleapis.com/chromewebstore/v1/licenses/&apos;+
                    app_id+&apos;/&apos;+openid_uri
    response = client.fetch_protected_resource( :uri =&gt; request_uri )

    status, headers, body = response

    session[:bought] = JSON.load(body[0])[&apos;accessLevel&apos;] || &apos;NONE&apos;

    redirect &apos;/&apos;
  else
    &quot;Error: #{resp.status}&quot;
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;###Login&lt;/p&gt;
&lt;p&gt;First off, your &lt;code class=&quot;language-text&quot;&gt;/login&lt;/code&gt; is where you send your users when you need to find
their payment status. I have all of my users do this right from the start.
This method creates a page with a status code of &lt;code class=&quot;language-text&quot;&gt;401&lt;/code&gt; and a special header of
&lt;code class=&quot;language-text&quot;&gt;WWW-Authenticate&lt;/code&gt;. When &lt;code class=&quot;language-text&quot;&gt;Rack OpenID&lt;/code&gt; sees this status code and the this
header, it automatically redirects to the proper OpenID provider, and provides the
information needed.&lt;/p&gt;
&lt;p&gt;You provide the header with a hash consisting of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:identifier&lt;/code&gt; - What OpenID provider to use, in this case we need Google.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:required&lt;/code&gt; - An array of urls that correlates to what parameters of the user
you want the OpenID provider to give you. In this case all we want in the
users Google OpenID ID. Google provides &lt;a href=&quot;http://code.google.com/apis/accounts/docs/OpenID.html&quot;&gt;this page&lt;/a&gt; for matching parameters to urls.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:realm&lt;/code&gt; - This is the website that you are asking users to trust, it should
be the exact same website that they are being returned to. The web store
will make sure that this is the same url that your application is located.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:return_to&lt;/code&gt; - Where to redirect the user after they sign in. I use
a helper method to generate the full url.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:method&lt;/code&gt; - How the user should be redirected back to your site, we want
post in this case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###Callback&lt;/p&gt;
&lt;p&gt;Next we have the &lt;code class=&quot;language-text&quot;&gt;post /openid/complete&lt;/code&gt; pattern to fill out. This is where
the user is redirected after they sign in through OpenID. &lt;code class=&quot;language-text&quot;&gt;Rack OpenID&lt;/code&gt; makes
another appearance as it automatically recognizes OpenID responses, and stuffs the
data into an Environment Variable called &lt;code class=&quot;language-text&quot;&gt;rack.openid.response&lt;/code&gt;. You grab that
data, and check if the response is successful. If so, its time for some Oauth
magic.&lt;/p&gt;
&lt;p&gt;Things you will need for this part:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Consumer Key and Consumer Secret - For all Web Store Oauth requests, these
will both be “anonymous”.&lt;/li&gt;
&lt;li&gt;Token Key and Token Secret - These can be generated at the Web Store
developer dashboard. &lt;a href=&quot;http://code.google.com/chrome/webstore/docs/check_for_payment.html#token&quot;&gt;More Info Here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;App ID - This can be found in the url of your Web Store application.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After generating the Oauth client object, you must encode the Google OpenID ID,
found the response’s &lt;code class=&quot;language-text&quot;&gt;identity_url&lt;/code&gt;, into something that Oauth can accept.
Next you construct the Oauth &lt;code class=&quot;language-text&quot;&gt;request url&lt;/code&gt;, which is one part the Google Licence
API url, one part &lt;code class=&quot;language-text&quot;&gt;app id&lt;/code&gt;, and one part encoded &lt;code class=&quot;language-text&quot;&gt;identity_url&lt;/code&gt;. Finally you
can send that off, and get your Oauth response.&lt;/p&gt;
&lt;p&gt;The response is made of three parts, &lt;code class=&quot;language-text&quot;&gt;[status, headers, body]&lt;/code&gt;. To make your
application more robust you can do some error checking here, but for me
I skipped right into the heart of the matter, which was the body. The body is
an array, with a JSON encoded response as the first element. This final
response has a property of &lt;code class=&quot;language-text&quot;&gt;accessLevel&lt;/code&gt;, which according &lt;a href=&quot;http://code.google.com/chrome/webstore/docs/check_for_payment.html#response&quot;&gt;to their
documentation&lt;/a&gt;
will either be &lt;code class=&quot;language-text&quot;&gt;FULL&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;FREE_TRIAL&lt;/code&gt;, or &lt;code class=&quot;language-text&quot;&gt;NONE&lt;/code&gt;. This is where I had my biggest
issue, their documentation is WRONG, in the worst way. If a user has not
purchased a copy, or installed a free trail, the &lt;code class=&quot;language-text&quot;&gt;accessLevel&lt;/code&gt; will not be
&lt;code class=&quot;language-text&quot;&gt;NONE&lt;/code&gt;, it just won’t exist. I currently set a session variable with this data,
but you can do anything you want with it.&lt;/p&gt;
&lt;p&gt;And thats it. This took me about a day and a half, just to hunt through all of
the documentation, but now you don’t have to!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sinatra vs Rails]]></title><description><![CDATA[When first getting into Ruby, I thought Rails was coolest thing since dynamic
variables. It was pure magic. Using a complicated mix of meta…]]></description><link>https://ekosz.github.io/archive/sinatra-vs-rails/</link><guid isPermaLink="false">https://ekosz.github.io/archive/sinatra-vs-rails/</guid><pubDate>Fri, 13 May 2011 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When first getting into Ruby, I thought Rails was coolest thing since dynamic
variables. It was pure magic. Using a complicated mix of meta-programming and
Ruby Ninjaing in the background, Rails allows the average developer to do really
complex things with only a few commands. And that was awesome.&lt;/p&gt;
&lt;p&gt;Today though, as much magic as Rails gives you, I feel that it really restricts
your ability to be expressive in your design. For example, when writing this
blog, I used a technique where I duplicated each route. One route for AJAX calls,
one for regular calls.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;get &apos;/posts/:m/:d/:y/:p&apos; do |month, day, year, post|
  full_page get_post [month, day, year, post].join(&apos;-&apos;)
end

get &apos;/ajax/posts/:m/:d/:y/:p&apos; do |month, day, year, post|
  get_post [month, day, year, post].join(&apos;-&apos;)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was really simple. &lt;code class=&quot;language-text&quot;&gt;get_post&lt;/code&gt; returns the html needed for a single post,
and &lt;code class=&quot;language-text&quot;&gt;full_page&lt;/code&gt; wraps the HTML given to it in everything outside of the main
div.&lt;/p&gt;
&lt;p&gt;If I wanted I could have reduced the line count even further with some regex.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;get %r{^\/(ajax\/)?posts\/(\d+)\/(\d+)\/(\d+)\/([^\/]+)$} do |ajax, month, year, day, post|
  post = get_post [month, day, year, post].join(&apos;-&apos;)
  ajax.empty? ? full_page post : post
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Though for 2 extra lines, you get a lot more readability. BUT, the power it
still there if you want to wield it.&lt;/p&gt;
&lt;p&gt;If I wanted to do this in Rails, it wouldn’t nearly feel as fun and free
spirited. I would have to create a couple controllers, break REST
(which I don’t know if it is just me, but I feel guilty doing in a Rails app)
create a Post model, fiddle around trying to serve AJAX content, and generally
not have such a free experience.&lt;/p&gt;
&lt;p&gt;_why is one of my all time heroes when it comes to programming. His opinion was that coding
is much more of an art than a business. Sure its a lot safer to write unit
tests, and have these standard sub-systems for everything, but what if
we just want to express ourselves in our code? What if I don’t care about all
the edge cases that could cause my code to blow up, I just want to take
a journey to get someplace?&lt;/p&gt;
&lt;p&gt;Rails seems like ponies and rainbows at first, but then you realize after
a while its all just a business framework like any other. And you know,
thats fine if I’m writing something for a client. I want that safety and
structure. I want that sense of control over my application. But, I feel that
as programmers, we forget that coding just for the feeling of creating something
and leaving all of our “business think” back in the office, is a wonderful
thing.&lt;/p&gt;
&lt;p&gt;I would recommend to everyone to touch a file, &lt;code class=&quot;language-text&quot;&gt;require &apos;sinatra&apos;&lt;/code&gt; and go wild.
Create something, just because you can. And thats awesome.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Building a blog]]></title><description><![CDATA[There comes a time in every up and coming web developer’s life that he realizes
that he/she needs a blog. And at that time they know that…]]></description><link>https://ekosz.github.io/archive/building-a-blog/</link><guid isPermaLink="false">https://ekosz.github.io/archive/building-a-blog/</guid><pubDate>Thu, 12 May 2011 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There comes a time in every up and coming web developer’s life that he realizes
that he/she needs a blog. And at that time they know that there are plenty of
off the shelf blogging platforms, but in their heart of hearts they know they must build
their own. And so thats what I did.&lt;/p&gt;
&lt;p&gt;I decided to make single web application, mostly inspired by the amazing guys
over at &lt;a href=&quot;http://www.9elements.com/&quot;&gt;9Elements&lt;/a&gt;. I’ve never really played with
AJAX heavy applications before and figured this would be an easy place to
start. On the backend I have &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; listening to HTTP
calls, and on requests starting with &lt;code class=&quot;language-text&quot;&gt;/ajax/&lt;/code&gt; it serves up only the meat of the
desired page, instead of the whole package. The posts themselves are written in
&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and stored as plain
files. Sinatra uses &lt;a href=&quot;http://kramdown.rubyforge.org/&quot;&gt;Kramdown&lt;/a&gt; as its markdown
processor, as it is the fastest one to my knowledge.&lt;/p&gt;
&lt;p&gt;I wanted the blog to be as simple as possible, so all of the metadata about the
posts is stored in the name of the files. For example, the name of this file
is &lt;code class=&quot;language-text&quot;&gt;05-12-11-building-a-blog.md&lt;/code&gt;. This gives the date for the application to
sort posts by, as well as the title to display.&lt;/p&gt;
&lt;p&gt;As for 3rd party tools I used for this project, I am using &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;,
&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML 5 Boilerplate&lt;/a&gt;, and a jQuery plug-in,
&lt;a href=&quot;http://code.google.com/p/jquery-appear/&quot;&gt;jQuery-Appear&lt;/a&gt; for the automatic
loading of posts as one scrolls through the index.&lt;/p&gt;
&lt;p&gt;As for the front end, I wanted to reflect my backend ideas about simplicity in
the look and feel of the site. I choose to go with a simple color scheme of
Black, White, and Light Blue.&lt;/p&gt;
&lt;p&gt;As for the fonts I recently watched the
&lt;a href=&quot;http://www.youtube.com/watch?v=QTX1lU97z08&quot;&gt;presentation from Google.io&lt;/a&gt; on
Google web fonts. I decided to try out the &lt;a href=&quot;http://www.google.com/webfonts/preview&quot;&gt;web font previewer&lt;/a&gt;
and was blown away how easy it was to find the &lt;code class=&quot;language-text&quot;&gt;line-height&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;letter-spacing&lt;/code&gt;, and
&lt;code class=&quot;language-text&quot;&gt;word-spacing&lt;/code&gt; that I wanted. I also found a little trick that came in handy.
For fonts that aren’t in Google’s font library, like the font I’m using here,
&lt;code class=&quot;language-text&quot;&gt;Helvetica Nue&lt;/code&gt;, I still wanted to use the font previewer. So, I used the
inspector tool to manually change the &lt;code class=&quot;language-text&quot;&gt;font-family&lt;/code&gt; to what ever I wanted to
test.&lt;/p&gt;
&lt;p&gt;Finally for the header menu and footer, I took inspiration from &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;Coffee Script’s
Website&lt;/a&gt;. I really liked the way
one could scroll through a long document without the menu seeming too
intrusive. I also added a fade-out to the bottom of the page, so that the
footer could travel with the page as well.&lt;/p&gt;
&lt;p&gt;For a compleate look at the website internals check it out on &lt;a href=&quot;https://github.com/ekosz/Personal-Blog&quot;&gt;GitHub&lt;/a&gt;,
and maybe mention a couple things I could have done better.&lt;/p&gt;
&lt;p&gt;Overall I’m really happy with how it turned out. I’m still not the best
developer, and I’m far from a decent designer, but this is something that
I wouldn’t mind showing off.&lt;/p&gt;</content:encoded></item></channel></rss>